<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>筱茗辰</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gracesoul.github.io/"/>
  <updated>2019-06-04T05:31:49.028Z</updated>
  <id>https://gracesoul.github.io/</id>
  
  <author>
    <name>Grace Soul</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>selenium之上传文件,日期控件操作</title>
    <link href="https://gracesoul.github.io/2019/06/04/selenium%E4%B9%8B%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6-%E6%97%A5%E6%9C%9F%E6%8E%A7%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>https://gracesoul.github.io/2019/06/04/selenium之上传文件-日期控件操作/</id>
    <published>2019-06-04T02:07:11.000Z</published>
    <updated>2019-06-04T05:31:49.028Z</updated>
    
    <content type="html"><![CDATA[<h4 id="selenium之上传文件-日期控件操作"><a href="#selenium之上传文件-日期控件操作" class="headerlink" title="selenium之上传文件,日期控件操作"></a>selenium之上传文件,日期控件操作</h4><ol><li>上传文件操作</li><li>日期控件操作<a id="more"></a></li><li><p>详解上传文件操作(2种操作场景)</p><ol><li>input标签–&gt;可以直接输入路径，直接调用send_keys输入路径</li><li>非input标签，借助第三方工具<ol><li>SendKeys第三方库(目前只支持python2.7版本) 网址：https:///pypi.python.org/pypi/SendKeys</li><li>Python pywin32库，识别对话框句柄，进而操作<br>使用pywin32库的方式：工具-&gt; pywin32,WinSpy<ol><li>pywin32在线安装：(3种方法)<ol><li>pip install pypiwin32</li><li>python -m pip install pypiwin32</li><li>pip install pywin32</li></ol></li><li>WinSpy安装(是.exe文件，直接下载安装,WinSpy是元素识别)<ol><li>工具下载地址：链接：<a href="https://pan.baidu.com/s/1cHdNHW" target="_blank" rel="noopener">https://pan.baidu.com/s/1cHdNHW</a>  密码：56bp</li><li>WinSpy工具为识别windos控件的工具，需要一层一层往里面找到要操作的文件输入框和打开按钮</li><li>前提：上传文件的window窗口已经打开<br>一级窗口：祖先级别元素<br><img src="/2019/06/04/selenium之上传文件-日期控件操作/1.png" alt="WinSpy"><br>文件名窗口：路径输入文本(四级窗口)<br><img src="/2019/06/04/selenium之上传文件-日期控件操作/2.png" alt="WinSpy"><br>文件名窗口的父级元素：(三级窗口-三级元素)<br><img src="/2019/06/04/selenium之上传文件-日期控件操作/3.png" alt="WinSpy"><br>三级窗口的属性显示：<br><img src="/2019/06/04/selenium之上传文件-日期控件操作/4.png" alt="WinSpy"><br>三级窗口的父级元素：(二级窗口–二级元素)<br><img src="/2019/06/04/selenium之上传文件-日期控件操作/5.png" alt="WinSpy"><br>二级窗口的属性显示：<br><img src="/2019/06/04/selenium之上传文件-日期控件操作/6.png" alt="WinSpy"><br>二级窗口的父级元素：(一级，如图一)<br><img src="/2019/06/04/selenium之上传文件-日期控件操作/7.png" alt="WinSpy"><br>四级窗口：打开按钮<br><img src="/2019/06/04/selenium之上传文件-日期控件操作/8.png" alt="WinSpy"><br>打开按钮的父级显示：<br><img src="/2019/06/04/selenium之上传文件-日期控件操作/9.png" alt="WinSpy"></li></ol></li></ol></li></ol></li><li>部分代码如下：<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> win32gui</span><br><span class="line"><span class="keyword">import</span> win32con</span><br><span class="line"></span><br><span class="line">def file_upload(filePath,browser_type=<span class="string">'chrome'</span>):</span><br><span class="line"><span class="keyword">if</span> browser_type == <span class="string">'chrome'</span>:</span><br><span class="line">title = <span class="string">'打开'</span></span><br><span class="line">else:</span><br><span class="line">title = <span class="string">''</span></span><br><span class="line"># 找元素---&gt;路径的输入文本框</span><br><span class="line"># 一级元素 一级窗口 <span class="keyword">class</span> = <span class="string">"#32770"</span>, title=<span class="string">"打开"</span></span><br><span class="line">dialog = win32gui.FindWindow(<span class="string">"#32770"</span>,title)</span><br><span class="line"># 二级元素 二级窗口 <span class="keyword">class</span>=<span class="string">'ComboBoxEx32'</span>,text=None</span><br><span class="line">ComboBoxEx32 = win32gui.FindWindowEx(dialog,<span class="number">0</span>,<span class="string">'ComboBoxEx32'</span>,None)</span><br><span class="line"># 三级元素 三级窗口 <span class="keyword">class</span>=<span class="string">'ComboBox'</span>,text=None</span><br><span class="line">comboBox = win32gui.FindWindowEx(ComboBoxEx32,<span class="number">0</span>,<span class="string">'ComboBox'</span>,None)</span><br><span class="line"># 四级元素 四级窗口 <span class="keyword">class</span>=<span class="string">''</span>,text=None</span><br><span class="line">edit = win32gui.FindWindowEx(comboBox,<span class="number">0</span>,<span class="string">'Edit'</span>,None) # 编辑按钮</span><br><span class="line"></span><br><span class="line"># 打开的按钮</span><br><span class="line">button = win32gui.FindWindowEx(dialog,<span class="number">0</span>,<span class="string">'Button'</span>,<span class="string">"打开(&amp;O)"</span>)</span><br><span class="line"># 往编辑当中，输入文件路径 。</span><br><span class="line">win32gui.SendMessage (edit, win32con.WM_SETTEXT, None, filePath)  # 发送文件路径</span><br><span class="line">win32gui.SendMessage (dialog, win32con.WM_COMMAND, <span class="number">1</span>, button)  # 点击打开按钮</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">file_upload(<span class="string">"D:\\111.png"</span>)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>详解日期控件操作<br>日历控件的使用场景:</p><ol><li>可以直接输入日期<br>直接使用send_keys()方法输入日期即可</li><li>不能够直接输入日期，只能够选择<br>基本思路：利用js去掉readonly属性，直接输入时间<ol><li>使用js代码获取当前这个元素</li><li>设置readonly属性值为false</li><li>再修改这个元素的value值</li></ol></li><li>代码如下：<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">  方法一：</span><br><span class="line">  <span class="comment"># 去掉只读</span></span><br><span class="line">  js_pha = <span class="string">"document.getElementById('train_date').readOnly=false;"</span></span><br><span class="line">  driver.execute_script(js_pha)</span><br><span class="line">  <span class="comment"># 清空原来的内容并写入新的内容</span></span><br><span class="line">  driver.find_element_by_id(<span class="string">'train_date'</span>).clear()</span><br><span class="line">  driver.find_element_by_id(<span class="string">'train_date'</span>).send_keys(<span class="string">'2019-07-07'</span>)</span><br><span class="line">  </span><br><span class="line">  方法二：</span><br><span class="line">  <span class="comment"># 去掉只读</span></span><br><span class="line">  js_pha = <span class="string">"document.getElementById('train_date').readOnly=false;"</span></span><br><span class="line">  driver.execute_script(js_pha)</span><br><span class="line">  <span class="comment"># 直接通过js语句来修改日期</span></span><br><span class="line">  driver.execute_script(<span class="string">"document.getElementById('train_date').value=2019-07-07"</span>)</span><br><span class="line">  </span><br><span class="line">  方法三：</span><br><span class="line">  js_pha = <span class="string">"var a = document.getElementById('train_date');"</span> <span class="string">\</span></span><br><span class="line">        <span class="string">"a.readOnly = false;"</span> <span class="string">\</span></span><br><span class="line">        <span class="string">"a.value = '2019-07-01'"</span></span><br><span class="line">  driver.execute_script(js_pha)</span><br><span class="line">  操作<span class="number">12306</span>选择日期的操作</span><br><span class="line">   <span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.maximize_window()</span><br><span class="line">driver.implicitly_wait(<span class="number">20</span>)</span><br><span class="line">driver.get(<span class="string">'https://www.12306.cn/'</span>)</span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//input[@id='fromStationText']"</span>).click()</span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//input[@id='fromStationText']"</span>).send_keys(<span class="string">'武汉'</span>,Keys.ENTER)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//input[@id='toStationText']"</span>).click()</span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//input[@id='toStationText']"</span>).send_keys(<span class="string">'深圳'</span>,Keys.ENTER)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行js</span></span><br><span class="line">js_pha = <span class="string">"var a = document.getElementById('train_date');"</span><span class="string">\</span></span><br><span class="line"><span class="string">'a.readOnly = false;'</span><span class="string">\</span></span><br><span class="line"><span class="string">'a.value = "2019-07-02";'</span></span><br><span class="line">driver.execute_script(js_pha)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//a[@id='search_one']"</span>).click()</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;selenium之上传文件-日期控件操作&quot;&gt;&lt;a href=&quot;#selenium之上传文件-日期控件操作&quot; class=&quot;headerlink&quot; title=&quot;selenium之上传文件,日期控件操作&quot;&gt;&lt;/a&gt;selenium之上传文件,日期控件操作&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;上传文件操作&lt;/li&gt;
&lt;li&gt;日期控件操作&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="selenium-python自动化" scheme="https://gracesoul.github.io/categories/selenium-python%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    
      <category term="python" scheme="https://gracesoul.github.io/tags/python/"/>
    
      <category term="selenium" scheme="https://gracesoul.github.io/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>selenium之下拉列表,鼠标,键盘操作</title>
    <link href="https://gracesoul.github.io/2019/06/03/selenium%E4%B9%8B%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8-%E9%BC%A0%E6%A0%87-%E9%94%AE%E7%9B%98%E6%93%8D%E4%BD%9C/"/>
    <id>https://gracesoul.github.io/2019/06/03/selenium之下拉列表-鼠标-键盘操作/</id>
    <published>2019-06-03T07:16:21.000Z</published>
    <updated>2019-06-04T02:01:02.793Z</updated>
    
    <content type="html"><![CDATA[<h4 id="selenium之下拉列表-鼠标-键盘操作"><a href="#selenium之下拉列表-鼠标-键盘操作" class="headerlink" title="selenium之下拉列表,鼠标,键盘操作"></a>selenium之下拉列表,鼠标,键盘操作</h4><ol><li>下拉列表操作 —&gt; Select类</li><li>鼠标操作  —&gt; ActionChains类</li><li>键盘操作 —&gt; Key类<a id="more"></a></li></ol><p>selenium当中的元素，有4个基本的操作</p><ol><li>click() —&gt;点击</li><li>send_keys() —-&gt;输入文本</li><li>WebElement对象.text —-&gt;获取文本内容</li><li>WebElement对象.get_attribute(属性名称) —-&gt;获取属性的值</li></ol><ol start="4"><li>详解操作下拉列表<br>下拉列表操作出现的场景：<ol><li>select/option<br>引入Select类： from selenium.webdriver.support.ui import Select<br>Select类来处理select/option元素<br>可以通过value，index(下标),text(文本内容)三种方式选择option对应的值。</li><li>ui/li<br>鼠标悬浮–》选择下拉列表的数据–》ctrl+shift+c 定位<br>操作流程：</li><li>菜单栏-点击其中的某一链接跳转</li><li>在下拉列表中选择某一值<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># select/option 部分代码</span></span><br><span class="line">from selenium.webdriver.support.ui import <span class="keyword">Select</span></span><br><span class="line"><span class="keyword">from</span> <span class="built_in">time</span> <span class="keyword">import</span> <span class="keyword">sleep</span></span><br><span class="line"><span class="comment"># 1. 找到select元素对象，实例化Select类。</span></span><br><span class="line">s = <span class="keyword">Select</span>(driver.find_element_by_xpath(<span class="string">'定位代码'</span>))</span><br><span class="line"><span class="comment"># 2. 选择下拉列表的值。</span></span><br><span class="line"><span class="comment"># 2.1 通过value属性值</span></span><br><span class="line">   <span class="keyword">sleep</span>(<span class="number">2</span>)</span><br><span class="line">   s.select_by_value(<span class="string">'value的值'</span>)</span><br><span class="line">   <span class="comment"># 2.2 通过index下标</span></span><br><span class="line">   <span class="keyword">sleep</span>(<span class="number">2</span>)</span><br><span class="line">   s.select_by_index(<span class="number">1</span>) <span class="comment"># 下标从0开始</span></span><br><span class="line"><span class="comment"># 不同点： iframe 下标从1开始</span></span><br><span class="line"><span class="comment"># 2.3 通过text文本内容</span></span><br><span class="line">   <span class="keyword">sleep</span>(<span class="number">2</span>)</span><br><span class="line">   s.select_by_text(<span class="string">'text文本内容'</span>)</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="5"><li>详解操作鼠标<br>主要操作流程：<ol><li>引入ActionChains类(from selenium.webdriver.common.action_chains import ActionChains)</li><li>存储鼠标操作</li><li>perform()来执行鼠标操作 这是逻辑（必须要带着 否则无法执行）<br>主要的操作方法：</li><li>move_to_element() —&gt;鼠标悬浮</li><li>drag_and_drop()   —&gt;拖拽</li><li>context_click()   —&gt;右键操作</li><li>double_click()    —&gt;双击操作</li><li>reset_actions()   —&gt;重置</li><li>click_and_hold()  —&gt;按着左键，不松开</li><li>click()           —&gt;点击</li><li>release()         —&gt;释放(这是实现逻辑，就像perform()函数一样)</li><li>send_keys()       —&gt;输入操作</li><li>pause()          —&gt;暂停</li><li>滚动—&gt;用js实现<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 前提是： 先找到要操作的元素</span><br><span class="line"># <span class="number">1.</span> 实例化鼠标类</span><br><span class="line"># <span class="number">2.</span> 调用各种鼠标行为</span><br><span class="line"># <span class="number">3.</span> 调用perform()方法去执行鼠标操作</span><br><span class="line"></span><br><span class="line"># 悬浮的数据如何定位？如何定位下拉列表的数据？-----&gt;</span><br><span class="line"><span class="number">1.</span> 执行过程中： f12--&gt;source--&gt;右侧的暂停的图标(使用的场景：定位捕获异常：比如账号密码输入错误，有短暂的弹出提示)</span><br><span class="line"><span class="number">2.</span> ctrl+shift+c(悬浮元素-》选中下拉的数据 -》ctrl+shift+c -》松开之后，再移动下)</span><br><span class="line"><span class="number">3.</span> 点击悬浮元素-&gt;点击下拉数据--&gt;右键--&gt;检查</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line">ele = driver.find_element_by_xpath(<span class="string">'定位代码'</span>)</span><br><span class="line"></span><br><span class="line">ActionChains(driver).move_to_element(ele).click(ele).perform() # 这是优化后精简的写法代码(推荐该方法)</span><br><span class="line"># 下一步：等待</span><br><span class="line"></span><br><span class="line"># ActionChains(driver).move_to_element(ele).click(ele).perform()代码类似于以下代码：</span><br><span class="line"># ele = driver.find_element_by_xpath(<span class="string">'定位代码'</span>)</span><br><span class="line"># ac = ActionChains(driver) # 实例化</span><br><span class="line"># ac.move_to_element(ele) # 悬浮</span><br><span class="line"># ac.click() # 点击</span><br><span class="line"># ac.perform() # 执行鼠标操作</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="6"><li>详解操作键盘<br>需要引入Key类–》from selenium.webdriver.common.keys import Keys<ol><li>组合键<ol><li>全选(ctrl+a):send_keys(Keys.CONTROL,’a’)</li><li>复制(ctrl+c):send_keys(Keys.CONTROL,’c’)</li><li>粘粘(ctrl+v):send_keys(Keys.CONTROL,’v’)</li><li>剪切(ctrl+x):send_keys(Keys.CONTROL,’x’)</li></ol></li><li>常用的非组合键<ol><li>回车键：Keys.ENTER</li><li>删除键：Keys.BACK_SPACE</li><li>空格键：Keys.SPACE</li><li>制表键：Keys.TAB</li><li>回退键：Keys.ESCAPE</li><li>刷新键：Keys.F5</li></ol></li><li>js之操作滚动<ol><li>可见/视区域–&gt; 为什么要滚动到可见区域？原因：先滚动到你要操作的元素，让其可见，然后再进行操作。</li><li>大部分系统在元素操作时，如果元素不在可见区域，随着操作会自动到可见区域 。<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">ele = driver.find_element_by_xpath(<span class="string">'定位代码'</span>)</span><br><span class="line">driver.execute_script(<span class="string">"arguments[0].scrollIntoView();"</span>,ele) # 页面顶端</span><br><span class="line">driver.execute_script(<span class="string">"arguments[0].scrollIntoView(false);"</span>,ele) # 页面底端</span><br><span class="line">driver.execute_script(<span class="string">"window.scrollTo(0,document.body.scrollHeight)"</span>) # 移动到页面底部</span><br><span class="line">driver.execute_script(<span class="string">"window.scrollTo(document.body.scrollHeight,0)"</span>) # 移动到页面顶部</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span>  webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.implicitly_wait(<span class="number">20</span>)</span><br><span class="line">driver.maximize_window()</span><br><span class="line">driver.get (<span class="string">'https://www.ketangpai.com/User/login.html'</span>)  # 打开课堂派</span><br><span class="line"># 输入登录账号</span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//input[@name='account']"</span>).clear()</span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//input[@name='account']"</span>).send_keys(<span class="string">'18871369'</span>)</span><br><span class="line"># 输入登录密码</span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//input[@name='pass']"</span>).clear()</span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//input[@name='pass']"</span>).send_keys(<span class="string">'123456'</span>)</span><br><span class="line"># 点击登录按钮</span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//div[@class='padding-cont pt-login']//a[@class='btn-btn']"</span>).click()</span><br><span class="line"># 点击进入自己的课堂</span><br><span class="line">locator = (By.XPATH,<span class="string">"//a[@data-id='MDAwMDAwMDAwMLOspd2Gz79r']"</span>)</span><br><span class="line">WebDriverWait(driver,<span class="number">20</span>).until(EC.visibility_of_element_located(locator))</span><br><span class="line">driver.find_element(*locator).click()</span><br><span class="line"></span><br><span class="line">ele = driver.find_element_by_xpath(<span class="string">"//a[contains(text(),'2019-04-19')]"</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"># driver.execute_script(<span class="string">"arguments[0].scrollIntoView();"</span>,ele) # 滑动到顶端</span><br><span class="line">driver.execute_script(<span class="string">"arguments[0].scrollIntoView(false);"</span>,ele) # 滑动到低端</span><br><span class="line"># driver.execute_script(<span class="string">"window.scrollTo(0,document.body.scrollHeight)"</span>) # 移动到页面底部</span><br><span class="line"># driver.execute_script(<span class="string">"window.scrollTo(document.body.scrollHeight,0)"</span>) # 移动到页面顶部</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//div[@data-id='MDAwMDAwMDAwMLSGtZaIub-y']//a[text()='查看成绩']"</span>).click()</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;selenium之下拉列表-鼠标-键盘操作&quot;&gt;&lt;a href=&quot;#selenium之下拉列表-鼠标-键盘操作&quot; class=&quot;headerlink&quot; title=&quot;selenium之下拉列表,鼠标,键盘操作&quot;&gt;&lt;/a&gt;selenium之下拉列表,鼠标,键盘操作&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;下拉列表操作 —&amp;gt; Select类&lt;/li&gt;
&lt;li&gt;鼠标操作  —&amp;gt; ActionChains类&lt;/li&gt;
&lt;li&gt;键盘操作 —&amp;gt; Key类&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="selenium-python自动化" scheme="https://gracesoul.github.io/categories/selenium-python%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    
      <category term="python" scheme="https://gracesoul.github.io/tags/python/"/>
    
      <category term="selenium" scheme="https://gracesoul.github.io/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>三大等待与三大切换</title>
    <link href="https://gracesoul.github.io/2019/05/29/%E4%B8%89%E5%A4%A7%E7%AD%89%E5%BE%85%E4%B8%8E%E4%B8%89%E5%A4%A7%E5%88%87%E6%8D%A2/"/>
    <id>https://gracesoul.github.io/2019/05/29/三大等待与三大切换/</id>
    <published>2019-05-29T01:21:30.000Z</published>
    <updated>2019-06-03T09:52:50.600Z</updated>
    
    <content type="html"><![CDATA[<h4 id="selenium之三大等待与三大切换"><a href="#selenium之三大等待与三大切换" class="headerlink" title="selenium之三大等待与三大切换"></a>selenium之三大等待与三大切换</h4><ol><li>三大等待(强制等待，隐形等待，显性等待)</li><li>三大切换(iframe(内嵌),window,alert(弹框))<a id="more"></a></li><li><p>详解三大等待<br>3.1 三大等待之强制等待<br>sleep(s秒) 让程序死等s秒，无论发生任何事情，s秒后继续执行后续代码<br>当我们的操作带来了页面的变化，那么一定需要等待(否则代码的稳定性很差)</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"># 浏览器会话的开始</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">sleep(<span class="number">3</span>) # 傻傻等<span class="number">3</span>秒</span><br></pre></td></tr></table></figure><p>3.2 三大等待之隐形等待<br>隐形等待：如果你10秒出现啦，我就开始下一步操作，设置上限：30秒，超时就报错：TimeoutException<br>设置最长的等待时间，可以自主判断，整个driver会话周期,设置一次，全局可用 (driver.get()—driver.quite())<br>implicitly_wait(s秒) driver会话周期：开始调用浏览器(浏览器会话的开始)—浏览器会话的结束(关闭浏览器则关闭了chromedriver)</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">from</span> selenium import webdriver</span><br><span class="line"><span class="comment"># 浏览器会话的开始</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 设置全局等待</span></span><br><span class="line">driver.implicitly_wait(<span class="number">30</span>) <span class="comment"># 所有存在find_element_by_XX(都会自动调用全局等待设置的时间)</span></span><br><span class="line">driver.<span class="built_in">get</span>(<span class="string">'https://ke.qq.com'</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">'js_login'</span>).click()</span><br><span class="line">driver.<span class="built_in">close</span>() <span class="comment"># 关闭当前的窗口</span></span><br><span class="line">driver.quite() <span class="comment"># 关闭浏览器则关闭了chromedriver</span></span><br></pre></td></tr></table></figure><p>3.3 三大等待之显性等待</p><ol><li>明确的条件：(元素可见，窗口存在…) 等待+条件</li><li>引入相应的库，明确等到某一条件满足后，再去执行下一步操作。程序每隔XX秒看一眼，<br>如果条件成立了，则执行下一步，否则继续等待，直到超过设置的最长时间，则抛出TimeoutException</li><li>WebDriverWait类：显性等待类<br>WebDriverWait(driver,等待时长,轮询周期).until()/until_not()（直到条件成立..才/直到条件不成立….才）</li><li>expected_conditions模块：提供一系列期望发生的条件<br>presence_of_element_located: 元素存在<br>visibility_of_element_located: 元素可见<br>element_to_be_clickable: 元素可点击</li></ol><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.<span class="keyword">by</span> <span class="keyword">import</span> By</span><br><span class="line"><span class="comment"># 元素存在： 在HTML里面存在，能找到，可以定位到</span></span><br><span class="line"><span class="comment"># 元素可见： 存在并且可见，看得见大小，宽高，可见才可以操作</span></span><br><span class="line"><span class="comment"># 元素可用： 前提：可见（只读，不可点击都不可用）可见之后，才有可用的可能性</span></span><br><span class="line"><span class="comment"># 等待表达式：lacator=(定位类型定位表达式)</span></span><br><span class="line">locator = (By.ID ,<span class="string">'TANGRAM__PSP_10__footerULoginBtn'</span>)</span><br><span class="line"><span class="comment"># 条件：EC.visibility_of_element_located(locator)</span></span><br><span class="line"><span class="comment"># 等待元素可见</span></span><br><span class="line">WebDriverWait(driver,<span class="number">30</span>,<span class="number">1</span>).<span class="keyword">until</span>(EC.visibility_of_element_located(locator))</span><br><span class="line">辅助--<span class="number">-0.5</span>秒 提高速度</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># 点击元素</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"TANGRAM__PSP_10__footerULoginBtn"</span>).click()</span><br></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.<span class="keyword">by</span> <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.Chrome() <span class="comment"># 浏览器会话开启</span></span><br><span class="line">driver.implicitly_wait(<span class="number">20</span>) <span class="comment"># 设置全局等待时间</span></span><br><span class="line">driver.get(<span class="string">'https://www.baidu.com'</span>) <span class="comment"># 加载静态界面</span></span><br><span class="line">driver.find_element_by_id(<span class="string">'kw'</span>).clear() <span class="comment"># 清除输入文本框</span></span><br><span class="line">driver.find_element_by_id(<span class="string">'kw'</span>).send_keys(<span class="string">'柠檬班'</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">'su'</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待(有个小技巧)</span></span><br><span class="line">locator = (By.XPATH,<span class="string">"//a[text()='_腾讯课堂']"</span>)</span><br><span class="line">WebDriverWait(driver,<span class="number">30</span>,<span class="number">1</span>).<span class="keyword">until</span>(EC.visibility_of_element_located(locator))</span><br><span class="line">sleep(<span class="number">0.5</span>) <span class="comment"># 辅助 提高代码速度</span></span><br><span class="line">driver.find_element(*locator).click() <span class="comment"># 解包 小技巧，减少代码的重复性</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">封装操作等待的方法</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">common_wait</span><span class="params">(element)</span>:</span></span><br><span class="line"> locator = (By.XPATH,element)</span><br><span class="line"> <span class="keyword">try</span>:</span><br><span class="line">     WebDriverWait(driver,<span class="number">30</span>,<span class="number">1</span>).until(EC.visibility_of_element_located(locator))</span><br><span class="line"> <span class="keyword">except</span> TimeoutException:</span><br><span class="line">     print(<span class="string">'没有找到该元素！'</span>)</span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line">     <span class="comment"># 没有异常，走else下面的代码</span></span><br><span class="line">     <span class="keyword">return</span> driver.find_element(*locator)</span><br></pre></td></tr></table></figure><hr></li><li><p>详解三大切换<br>4.1 三大切换之iframe<br>iframe:frame切换有2种方法</p><ol><li>driver.switch_to.frame(frame_reference)<br>frame_reference的值有3种：<ol><li>iframe的下标(在当前页面中第几个iframe)</li><li>iframe的name的属性</li><li>iframe的WebElement对象</li></ol></li><li>frame_to_be_available_and_switch_to_it(frame_reference)<br>判断iframe是否可用，并且自动切换到iframe新的html页面中<br>frame_reference取值同方法一：</li><li>退出iframe回到默认的页面<br>driver.switch_to.default_content()</li><li>返回到上一个父iframe页面<br>driver.switch_to.parent_frame()<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">第一种方法：</span><br><span class="line">操作使用账号密码登录腾讯课堂</span><br><span class="line">driver.switch_to.frame(下标索引)</span><br><span class="line">driver.switch_to.frame(<span class="string">'name属性值'</span>)</span><br><span class="line">driver.switch_to.frame(WebElement对象)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">'https://ke.qq.com'</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">common_wait(<span class="string">"//a[@id='js_login']"</span>,driver).click()</span><br><span class="line">common_wait(<span class="string">"//a[text()='QQ登录']"</span>,driver).click()</span><br><span class="line">driver.switch_to.frame(<span class="number">4</span>)  # 方法<span class="number">1.1</span></span><br><span class="line">driver.switch_to.frame(<span class="string">"login_frame_qq"</span>) # 方法<span class="number">1.2</span> ---&gt;常用</span><br><span class="line">driver.switch_to.frame(driver.find_element_by_xpath(<span class="string">'//iframe[@name="login_frame_qq"]'</span>)) # 方法<span class="number">1.3</span></span><br><span class="line"># 进入了iframe里面的html页面，主页面了。</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">第二种方法：iframe可用然后切进iframe  等待+切换</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.<span class="keyword">by</span> <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">'https://ke.qq.com'</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">common_wait(<span class="string">"//a[@id='js_login']"</span>,driver).click()</span><br><span class="line">common_wait(<span class="string">"//a[text()='QQ登录']"</span>,driver).click()</span><br><span class="line">WebDriverWait(driver,<span class="number">20</span>).<span class="keyword">until</span>(EC.frame_to_be_available_and_switch_to_it(<span class="number">4</span>)) <span class="comment"># 方法2.1</span></span><br><span class="line">WebDriverWait(driver,<span class="number">20</span>).<span class="keyword">until</span>(EC.frame_to_be_available_and_switch_to_it(login_frame_qq)) <span class="comment"># 方法2.2---》常用</span></span><br><span class="line">WebDriverWait(driver,<span class="number">20</span>).<span class="keyword">until</span>(EC.frame_to_be_available_and_switch_to_it(driver.find_element_by_xpath(<span class="string">'//iframe[@name="login_frame_qq"]'</span>))) <span class="comment"># 方法2.3</span></span><br><span class="line"><span class="comment"># 进入了iframe里面的html页面，主页面了。</span></span><br></pre></td></tr></table></figure><p>4.2 三大切换之window<br>window:窗口切换 有2种方法</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">第一种方法：</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.<span class="keyword">by</span> <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.implicitly_wait(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">'https://www.baidu.com'</span>) <span class="comment"># 加载静态界面</span></span><br><span class="line">driver.find_element_by_id(<span class="string">'kw'</span>).clear() <span class="comment"># 清空文本输入框</span></span><br><span class="line">driver.find_element_by_id(<span class="string">'kw'</span>).send_keys(<span class="string">'柠檬班'</span>) <span class="comment"># 输入柠檬班</span></span><br><span class="line">driver.find_element_by_id(<span class="string">'su'</span>).click() <span class="comment"># 点击百度一下的按钮</span></span><br><span class="line"><span class="comment"># 等待</span></span><br><span class="line">locator = (By.XPATH,<span class="string">"//a[text()='_腾讯课堂']"</span>)</span><br><span class="line">WebDriverWait(driver,<span class="number">20</span>,<span class="number">1</span>).<span class="keyword">until</span>(EC.visibility_of_element_located(locator))</span><br><span class="line">driver.find_element(*locator)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 点击柠檬班_腾讯课堂</span></span><br><span class="line">打开新的窗口</span><br><span class="line"><span class="number">1.</span> 获取所有的窗口（handle:句柄，唯一的id值）</span><br><span class="line">handles = driver.window_handles <span class="comment"># 按照窗口出现的顺序，最后一个就是最近打开的窗口</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'所有的句柄是：&#123;&#125;'</span>.format(handles)) <span class="comment"># 得到的是列表</span></span><br><span class="line">current_handle = driver.current_window_handle</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'当前的窗口的句柄是：&#123;&#125;'</span>.format(current_handle))</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 切换新的窗口，点击课程</span><br><span class="line">driver.switch_to.<span class="built_in">window</span>(handles[<span class="number">-1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'切换之后的窗口为：&#123;&#125;'</span>.format(driver.current_window_handle))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在新的窗口中，点击课程</span></span><br><span class="line"><span class="comment"># 页面之中，等待</span></span><br><span class="line">locator = (By.XPATH,<span class="string">"//section[@class='section-main']//h2[contains(text(),'课程')]"</span>)</span><br><span class="line">WebDriverWait(driver,<span class="number">20</span>,<span class="number">1</span>).<span class="keyword">until</span>(EC.visibility_of_element_located(locator))</span><br><span class="line">driver.find_element(*locator).click()</span><br></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">方法二：</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.<span class="keyword">by</span> <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.implicitly_wait(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">'https://www.baidu.com'</span>) <span class="comment"># 加载静态界面</span></span><br><span class="line">driver.find_element_by_id(<span class="string">'kw'</span>).clear() <span class="comment"># 清空文本输入框</span></span><br><span class="line">driver.find_element_by_id(<span class="string">'kw'</span>).send_keys(<span class="string">'柠檬班'</span>) <span class="comment"># 输入柠檬班</span></span><br><span class="line">driver.find_element_by_id(<span class="string">'su'</span>).click() <span class="comment"># 点击百度一下的按钮</span></span><br><span class="line"><span class="comment"># 等待</span></span><br><span class="line">locator = (By.XPATH,<span class="string">"//a[text()='_腾讯课堂']"</span>)</span><br><span class="line">WebDriverWait(driver,<span class="number">20</span>,<span class="number">1</span>).<span class="keyword">until</span>(EC.visibility_of_element_located(locator))</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 点击柠檬班_腾讯课堂</span></span><br><span class="line"><span class="comment"># step1:获取窗口数</span></span><br><span class="line">handles = driver.window_handles  <span class="comment"># 只有一个窗口(因为上一步没有点击操作)</span></span><br><span class="line"><span class="comment"># step2: 执行打开新窗口的操作</span></span><br><span class="line">driver.find_element(*locator).click() <span class="comment"># 本操作带来了新的窗口---2个 </span></span><br><span class="line"><span class="comment"># step3: 确认新的窗口出现了，再去操作它，等待新窗口出现（只是确认啦新窗口，没有切换）</span></span><br><span class="line">WebDriverWait(driver,<span class="number">20</span>,<span class="number">1</span>).<span class="keyword">until</span>(EC.new_window_is_opened(handles)) <span class="comment"># 确认新窗口的出现</span></span><br><span class="line"><span class="comment"># step4: 再次获取，窗口的handles</span></span><br><span class="line">handles = driver.www</span><br><span class="line"><span class="comment"># step5: 切换到新窗口</span></span><br><span class="line">driver.switch_to.<span class="built_in">window</span>(handles[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在新的窗口中，点击课程</span></span><br><span class="line"><span class="comment"># 页面之中，等待</span></span><br><span class="line">locator = (By.XPATH,<span class="string">"//section[@class='section-main']//h2[contains(text(),'课程')]"</span>)</span><br><span class="line">WebDriverWait(driver,<span class="number">20</span>,<span class="number">1</span>).<span class="keyword">until</span>(EC.visibility_of_element_located(locator))</span><br><span class="line">driver.find_element(*locator)</span><br></pre></td></tr></table></figure></li></ol><p>   4.3 三大切换之alert<br>   弹出框有2种：</p><pre><code>1. 页面弹出框---》html页面元素 DOM   1. 执行触发操作后，等待弹出框出现   2. 再定位弹出框的元素并操作2. alert弹出框---Alert类--html页面上无法定位(不是html元素)   切换--》接收 switch_to.alert--》alert是属性   1. 浏览器弹出框，使用switch_to.alert方法切换到浏览器弹出框(driver.switch_to.alert)   2. alert提供一系列操作方法：      1. click()----&gt;点击操作      2. accept()----&gt;点击确定按钮      3. dismiss()----&gt;点击取消按钮      4. text()----&gt;获取弹出框里面的内容      5. send_keys()----&gt;向弹出框输入文本</code></pre>   <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"># 操作 导致alert弹出出现</span><br><span class="line">driver.find_element_by_xpath(<span class="string">'定位代码'</span>).click()</span><br><span class="line"># 点击页面元素，导致触发alert弹框出现</span><br><span class="line">......</span><br><span class="line"># <span class="number">1.</span> 等待弹框</span><br><span class="line"># <span class="number">2.</span> 从html切换到alert----&gt;实例化一个Alert类</span><br><span class="line"># <span class="number">3.</span> 获取alert文本内容</span><br><span class="line"># <span class="number">4.</span> 点击弹框中确定/取消，来关闭弹框（使弹出消失）</span><br><span class="line">alert_is_present()--》是一个类，等待弹框出现</span><br><span class="line">WebDriverWait(driver,<span class="number">20</span>).until(EC.alert_is_present())</span><br><span class="line">alert = driver.switch_to.alert</span><br><span class="line">text = alert.text</span><br><span class="line">alert.accept()</span><br><span class="line"># alert.dismiss()</span><br><span class="line"># # 进行后续的其它元素操作。</span><br></pre></td></tr></table></figure><p>   图形验证码：</p><pre><code>1. 主动屏蔽2. 找开发 配置万能验证码3. 验证码一般会入库，可以直接去数据库查询入库的验证码，然后输入即可</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;selenium之三大等待与三大切换&quot;&gt;&lt;a href=&quot;#selenium之三大等待与三大切换&quot; class=&quot;headerlink&quot; title=&quot;selenium之三大等待与三大切换&quot;&gt;&lt;/a&gt;selenium之三大等待与三大切换&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;三大等待(强制等待，隐形等待，显性等待)&lt;/li&gt;
&lt;li&gt;三大切换(iframe(内嵌),window,alert(弹框))&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="selenium-python自动化" scheme="https://gracesoul.github.io/categories/selenium-python%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    
      <category term="python" scheme="https://gracesoul.github.io/tags/python/"/>
    
      <category term="selenium" scheme="https://gracesoul.github.io/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>selenium之元素定位</title>
    <link href="https://gracesoul.github.io/2019/05/28/selenium%E4%B9%8B%E5%85%83%E7%B4%A0%E5%AE%9A%E4%BD%8D/"/>
    <id>https://gracesoul.github.io/2019/05/28/selenium之元素定位/</id>
    <published>2019-05-28T02:14:01.000Z</published>
    <updated>2019-05-28T05:31:35.618Z</updated>
    
    <content type="html"><![CDATA[<h4 id="selenium自动化实战之元素定位"><a href="#selenium自动化实战之元素定位" class="headerlink" title="selenium自动化实战之元素定位"></a>selenium自动化实战之元素定位</h4><ol><li><p>元素定位的方法：(6+2)<br>6: 6种常用的操作方法(id(唯一),class name,name,tag name,link,partial link)<br>2: 2种通用万能的操作方法(xpath定位,css定位)</p><a id="more"></a></li><li><p>8大元素定位的详解</p><ol><li>id定位：页面元素属性名id的值(id 是唯一的)，但不是所有的元素都有id,有id属性值的元素，id定位是首选的元素定位方式<pre><code>定位代码：driver.find_element_by_id(&apos;id属性的值&apos;) 返回的是WebElement对象，可以调用属性和方法</code></pre></li><li>name定位：元素的name属性，但name不是唯一的，name的属性值可以相同<pre><code>定位代码：driver.find_element_by_name(&apos;name属性的值&apos;) 找一单一元素，从上往下，符合条件的第一个值driver.find_elements_by_name(&apos;name属性的值&apos;) 找所有匹配的元素，返回的是列表，每一个单一的元素可以调用属性与方法</code></pre></li><li>class name定位：元素class属性，主要是用class对元素进行分组，对元素设置相同的属性<pre><code> 定位代码：driver.find_element_by_class_name(&apos;class属性的值&apos;)（当class属性有多个值的时候，要分开写，不能把所有的属性值以空格分开写在一起）</code></pre></li><li>tag name定位：元素的标签名(&lt;标签名 属性名=’属性值’&gt;文本类容&lt;/标签名&gt;)<pre><code>定位代码：driver.find_element_by_tag_name(&apos;标签名称&apos;)</code></pre></li><li>link定位：链接文本内容全匹配<pre><code>定位代码：driver.find_element_by_link_text(a元素的文本内容)</code></pre></li><li>partial liink定位：链接文本内容部分匹配（包含的意思）<pre><code>定位代码：driver.find_element_by_partial_link_text(a元素的部分文本内容)</code></pre></li><li><p>xpath定位: 针对元素的单一特性进行定位的方法，包含绝对定位与相对定位</p><pre><code>定位代码：driver.find_element_by_xpath(&apos;xpath表达式&apos;) ctrl+F 在浏览器中 检查xpath路径是否正确</code></pre><p>html元素：最顶层的祖先<br>head和body：为兄弟关系，同一水平位置<br>body之下所有元素： 按照层级 子代关系<br>xpath基本定位语法：<br>  <img src="/2019/05/28/selenium之元素定位/xpath.png" alt="selenium之元素定位"></p><ol><li>绝对定位： 严格按照路径与位置来定位,以/开头（该定位方法不可取，页面元素一旦发生改变，路径必须重写，而且检索慢）</li><li><p>相对定位： 不考虑位置与路径，灵活性高，以//开头。（考虑页面是否存在符合表达式的元素即可）包含很多种方法</p><ol><li>组合标签+属性定位： //标签名[@属性名=’属性值’]   //标签名[@属性名=’属性值’ and @属性名=’属性值’] 可以加逻辑运算：and / or</li><li>组合元素定位： //条件一//条件二 (后一个条件是在前一个条件得到的结果之后再去搜索的) //标签名[@属性名=’属性值’]//标签名[@属性名=’属性值’] </li><li><p>文本内容匹配： 函数 text() 文本全部匹配：text()=文本内容 ；<br>文本部分匹配：contains(text(),部分文本内容)</p><pre><code>//标签名[text()=&apos;元素的文本内容&apos;]  //标签名[contains(text(),&apos;元素的文本内容&apos;)]  //标签名[contains(@属性,&apos;部分属性值&apos;)]</code></pre></li><li><p>轴定位表达式： 轴运算名称 全部以/ (表达式/轴定位名称::标签名[@属性名=’属性值’])</p><ol><li>ancestor: 祖先(根节点)</li><li>parent : 父节点</li><li>preceding：当前元素节点标签之前的所有的节点(html页面先后顺序)</li><li>preceding-sibling：当前元素节点标签之前的所有的兄弟节点（同级）-》哥哥姐姐</li><li>following：当前元素节点标签之后的所有的节点 (html页面先后顺序)</li><li>following-sibling：当前元素节点标签之后的所有的兄弟节点（同级）-》弟弟妹妹</li><li>使用语法：轴名称::节点名称<pre><code>//标签名[@属性名=&apos;属性值&apos;]/parent::标签名::节点名称/preceding-sibling::标签名//标签名[@属性名=&apos;属性值&apos;]</code></pre>parent 是前一个表达式的父亲  parent::标签名（标签名是该节点（父亲）的标签的名称）</li></ol></li></ol></li></ol></li><li><p>css定位:<br>定位代码：driver.find_element_by_css_selector(css表达式)<br>css基本定位语法：<br><img src="/2019/05/28/selenium之元素定位/css1.png" alt="selenium之元素定位"><br><img src="/2019/05/28/selenium之元素定位/css2.png" alt="selenium之元素定位"><br><img src="/2019/05/28/selenium之元素定位/css3.png" alt="selenium之元素定位"></p></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;selenium自动化实战之元素定位&quot;&gt;&lt;a href=&quot;#selenium自动化实战之元素定位&quot; class=&quot;headerlink&quot; title=&quot;selenium自动化实战之元素定位&quot;&gt;&lt;/a&gt;selenium自动化实战之元素定位&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;元素定位的方法：(6+2)&lt;br&gt;6: 6种常用的操作方法(id(唯一),class name,name,tag name,link,partial link)&lt;br&gt;2: 2种通用万能的操作方法(xpath定位,css定位)&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="selenium-python自动化" scheme="https://gracesoul.github.io/categories/selenium-python%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    
      <category term="python" scheme="https://gracesoul.github.io/tags/python/"/>
    
      <category term="selenium" scheme="https://gracesoul.github.io/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>测试报告的撰写</title>
    <link href="https://gracesoul.github.io/2019/05/24/%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A%E7%9A%84%E6%92%B0%E5%86%99/"/>
    <id>https://gracesoul.github.io/2019/05/24/测试报告的撰写/</id>
    <published>2019-05-24T02:28:07.000Z</published>
    <updated>2019-05-24T03:29:19.284Z</updated>
    
    <content type="html"><![CDATA[<h4 id="测试小白之测试报告的撰写"><a href="#测试小白之测试报告的撰写" class="headerlink" title="测试小白之测试报告的撰写"></a>测试小白之测试报告的撰写</h4><ol><li><p>测试报告具体内容包括以下方面：(不同公司模板或有不同，但大体一致)<br>引言部分<br>测试基本信息<br>测试结果与缺陷分析<br>测试结论与建议<br>交付文档</p><a id="more"></a><p><img src="/2019/05/24/测试报告的撰写/write.png" alt="测试报告文本"></p></li><li><p>内容详解<br>第一部分：引言</p><ol><li>项目背景<br>本测试报告的具体编写的目的(3-4句)<br>本测试报告为(系统名称)系统测试报告，本报告的目的在于总结测试阶段的测试以及测试结果的分析，<br>描述系统是否达到了需求的目的<br>本报告预期参考人员包括：测试人员，测试部门经理，项目管理人员，SQA人员以及质量控制人员</li><li>参考资料<br>这里主要包括《需求规格说明书》,测试计划，测试用例，缺陷记录</li></ol><p>第二部分：测试基本信息</p><ol><li><p>测试范围<br>产品-》模块-》子模块-》功能-》测试点-》优先级-》负责人</p></li><li><p>测试案例设计思路<br>根据测试范围的测试点进行测试用例的设计，主要采用黑盒测试方法：等价划分，边界值分析，错误推测法，场景法</p><ol><li>功能测试：确保测试对象的功能正常，其中包括：业务流程，数据处理，边界值等功能</li><li>用户界面测试：用户与软件之间的交互，确保用户界面会通过测试对象的功能来为用户提供相应的访问或浏览功能，<br>确保 UI 中的对象按照预期的方式运行，确保各个窗口风格(颜色，字体，提示信息，图标等)与需求保持一致，保证用户界面的友好性，易操作性</li><li>流程测试：核实实际业务流程在系统中的完整正确的实现，确保各业务流程内部数据流转以及流程之间接口数据的正确，确保角色权限对流程的限制的正确性</li><li>安全性测试：确保用户，管理员的密码或私人信息的安全，管理安全，应用程序级别以及系统级别的安全性</li><li>兼容性测试：确保系统在各个不同版本不同类型浏览器中均可以正常操作功能</li></ol></li></ol><p>第三部分：测试结果与缺陷分析</p><ol><li><p>测试用例执行情况与记录</p><ol><li>测试组织<br><img src="/2019/05/24/测试报告的撰写/zuzhi.png" alt="组织人员"></li><li>测试时间<br><img src="/2019/05/24/测试报告的撰写/time.png" alt="测试时间"></li><li>冒烟情况<br><img src="/2019/05/24/测试报告的撰写/test.png" alt="测试"></li><li>测试用例统计<br><img src="/2019/05/24/测试报告的撰写/case.png" alt="用例统计"></li></ol></li><li><p>缺陷的统计与分析</p><ol><li>缺陷汇总<br>缺陷总数：X  , 已解决：Y  , 激活：X-Y<br><img src="/2019/05/24/测试报告的撰写/error1.png" alt="缺陷总数">  </li><li>缺陷分析<br>安装缺陷类型统计：<br><img src="/2019/05/24/测试报告的撰写/error3.png" alt="缺陷总数"><br>从以上数据得出，大量bug类型为代码问题，只有1个是性能问题<br>按严重程度统计：<br>按功能模块统计：<br>按测试阶段统计：<br>（以上3种来兴统计及分析都参考缺陷类型统计及分析来整理）</li><li>缺陷残留与未解决的问题<br><img src="/2019/05/24/测试报告的撰写/bug.png" alt="缺陷残留"><br>（以上这块把所有残留未解决的问题按列表进行整理出来）</li></ol></li></ol><p>第四部分：测试结论与建议</p><ol><li>风险分析与建议<br>（列举测试执行过程中比如因资源不足导致测试覆盖不全的问题，例如app测试过程中兼容性测试，因为公司测试机的缺少，存在测试不完全）</li><li>测试结论<br>本项目根据业务需求及开发人员的反馈意见，覆盖了所有的测试需求及案例，均已在ST环境测试完成，有效案例一共 xx个，执行率 xx%,，成功率 xx%，缺陷关闭率为xx%,目前缺陷均已修复并回归关闭<br>综上所述，xx项目达到ST项目测试出口标准，本项目ST测试(通过/不通过)，可以进行验收测试/发布</li></ol><p>第五部分：交付文档<br>  将测试过程中所有的文档进行交付，主要包括：测试计划，测试用例，缺陷记录，测试报告</p></li></ol><p>转载自：<a href="https://www.cnblogs.com/liulinghua90/" target="_blank" rel="noopener">https://www.cnblogs.com/liulinghua90/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;测试小白之测试报告的撰写&quot;&gt;&lt;a href=&quot;#测试小白之测试报告的撰写&quot; class=&quot;headerlink&quot; title=&quot;测试小白之测试报告的撰写&quot;&gt;&lt;/a&gt;测试小白之测试报告的撰写&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;测试报告具体内容包括以下方面：(不同公司模板或有不同，但大体一致)&lt;br&gt;引言部分&lt;br&gt;测试基本信息&lt;br&gt;测试结果与缺陷分析&lt;br&gt;测试结论与建议&lt;br&gt;交付文档&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="测试报告模板" scheme="https://gracesoul.github.io/categories/%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A%E6%A8%A1%E6%9D%BF/"/>
    
    
      <category term="测试报告" scheme="https://gracesoul.github.io/tags/%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/"/>
    
      <category term="模板" scheme="https://gracesoul.github.io/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>pycharm之常用快捷键</title>
    <link href="https://gracesoul.github.io/2019/05/22/pycharm%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://gracesoul.github.io/2019/05/22/pycharm之常用快捷键/</id>
    <published>2019-05-22T06:57:10.000Z</published>
    <updated>2019-05-22T07:51:43.285Z</updated>
    
    <content type="html"><![CDATA[<h4 id="pycharm之常用快捷键"><a href="#pycharm之常用快捷键" class="headerlink" title="pycharm之常用快捷键"></a>pycharm之常用快捷键</h4><ol><li>编辑类</li><li>查找类</li><li>运行类</li><li>调试类</li><li>导航类</li><li>重构类<a id="more"></a></li></ol><hr><ol><li><p>编辑类<br>Ctrl + D          —————&gt;           复制选定的区域/行<br>Ctrl + Y          —————&gt;           删除选定的行<br>Ctrl + /          —————&gt;           行注释<br>Alt + Insert      —————&gt;          自动生成代码<br>Ctrl + O          —————&gt;              重新方法<br>Ctrl + Alt + T    —————&gt;      选中<br>Ctrl + Shift + /  —————&gt;      块注释<br>Ctrl + 鼠标       —————&gt;        进入代码的定义<br>Ctrl + W          —————&gt;              选中增加的代码块<br>Ctrl + Shift + W  —————&gt;      回到之前状态<br>Alt + Enter       —————&gt;          快速修正<br>Ctrl + Alt + L    —————&gt;     代码格式化<br>Ctrl + Alt + O    —————&gt;     自动导包<br>Ctrl + Alt + I    —————&gt;      自动缩进<br>Ctrl + [          —————&gt;           快速跳到代码的开头<br>Ctrl + ]          —————&gt;           快速跳到代码的结尾<br>Shift + Enter     —————&gt;      下一行另起一行<br>Ctrl + Shift + U  —————&gt;      在选定的区域或代码块间切换<br>Ctrl + Delete     —————&gt;      删除到字符结束<br>Ctrl + Backspace  —————&gt;      删除到字符开始</p></li><li><p>替换/查找类<br>Ctrl + F            —————&gt;            当前文件查找<br>Ctrl + R            —————&gt;            当前文件替换<br>Ctrl + Shift + F    —————&gt;    全局查找<br>Ctrl + Shift + R    —————&gt;    全局替换<br>Alt + F7/Ctrl + F7  —————&gt;  文件中查询用法<br>Ctrl + Shift + F7   —————&gt;   文件中用法高亮显示<br>Ctrl + Alt + F7     —————&gt;       显示用法</p></li><li><p>运行类<br>Shift + F10         —————&gt;      运行类<br>Shift + F9          —————&gt;       调试<br>Alt + Shift + F10   —————&gt; 运行模式配置<br>Alt + Shift + F9    —————&gt;  调试模式配置</p></li><li><p>调试类<br>F8                —————&gt;                单步调试<br>F7                —————&gt;                进入内部<br>Shift + F8        —————&gt;        退出<br>Ctrl + F8         —————&gt; 在当前行加上断点/断点开关<br>Ctrl + Shift + F8 —————&gt; 查看所有断点</p></li><li><p>导航类<br>Ctrl + N                —————&gt;               快速查找类，也可查找当前工程中的文件，以文件名查找<br>Ctrl + Tab              —————&gt;              在窗口间进行切换<br>Ctrl+B / Ctrl+Click     —————&gt;      跳转到声明<br>Ctrl + Alt + B           —————&gt;          跳转到实现<br>Ctrl + Shift + I           —————&gt;          查看快速定义<br>Ctrl + Shift + B           —————&gt;          跳转到类型声明<br>Ctrl + U                   —————&gt;                  跳转到父方法、父类<br>Alt + Up/Down           —————&gt;          跳转到上一个、下一个方法<br>Ctrl + F12               —————&gt;              弹出文件结构<br>Ctrl + H                   —————&gt;                  类型层次结构<br>Ctrl + Shift + H           —————&gt;          方法层次结构<br>Ctrl + Alt + H           —————&gt;          调用层次结构<br>F2 / Shift + F2           —————&gt;          下一条、前一条高亮的错误</p></li><li><p>重构类<br>F5                —————&gt;      复制<br>F6                —————&gt;      剪切<br>Alt + Delete        —————&gt;      安全删除<br>Shift + F6        —————&gt;      方法或变量重命名<br>Ctrl + F6        —————&gt;      更改签名<br>Ctrl + Alt + N    —————&gt;      内联<br>Ctrl + Alt + M    —————&gt;      提取方法<br>Ctrl + Alt + V    —————&gt;      提取属性<br>Ctrl + Alt + F    —————&gt;      提取字段<br>Ctrl + Alt + C    —————&gt;      提取常量<br>Ctrl + Alt + P    —————&gt;      提取参数</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;pycharm之常用快捷键&quot;&gt;&lt;a href=&quot;#pycharm之常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;pycharm之常用快捷键&quot;&gt;&lt;/a&gt;pycharm之常用快捷键&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;编辑类&lt;/li&gt;
&lt;li&gt;查找类&lt;/li&gt;
&lt;li&gt;运行类&lt;/li&gt;
&lt;li&gt;调试类&lt;/li&gt;
&lt;li&gt;导航类&lt;/li&gt;
&lt;li&gt;重构类&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="闲谈快捷键" scheme="https://gracesoul.github.io/categories/%E9%97%B2%E8%B0%88%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
    
      <category term="工具" scheme="https://gracesoul.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="快捷键" scheme="https://gracesoul.github.io/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>python之类与对象</title>
    <link href="https://gracesoul.github.io/2019/05/21/python%E4%B9%8B%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
    <id>https://gracesoul.github.io/2019/05/21/python之类与对象/</id>
    <published>2019-05-21T07:30:50.000Z</published>
    <updated>2019-05-21T08:52:19.886Z</updated>
    
    <content type="html"><![CDATA[<h4 id="python面向对象编程之类与对象"><a href="#python面向对象编程之类与对象" class="headerlink" title="python面向对象编程之类与对象"></a>python面向对象编程之类与对象</h4><ol><li>类的语法：<br>class 类名:<br>   类的解释文档<br>   类方法(功能)，类属性(特征)<br>   def 方法名():  pass<a id="more"></a></li><li>类名的规范：标识符 数字 字母 下划线组成 <strong><em>不能以数字开头</em></strong></li><li>见名之意,不能使用关键字  驼峰命名： 每个单词首字母大写</li><li>万物皆对象（对象都是来自(属于)某一个类）–》<strong><em>类可以产生对象</em></strong></li><li>创建对象：类名() —&gt; 类名+括号()</li><li><strong><em>对象具有类的所有的属性和方法</em></strong> 。 调用：对象.属性  对象.方法</li><li>类的方法：对象方法，静态方法，类方法</li><li>在类外面：类里面的属性与方法 ：该类实例化的对象可以调用</li><li>对象方法：def 方法名(self): self–&gt; 调用这个方法的对象本身<br>只能用对象来调用 (<strong><em>类不可以调用对象方法</em></strong>)</li><li>类方法：@classmethod  def 方法名(cls)： cls表示类本身，调用该方法的时候，会将类作为参数传进来<br>类可以调用，对象也可以调用 用@classmethod来装饰</li><li>静态方法：@static   def 方法名()<br>类可以调用，对象也可以调用 用@static来装饰<br>如果有这样的一个方法，它跟类里面的属性，方法，没有任何关联的时候，用不到类里面的属性，方法，就使用静态方法 </li><li></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;python面向对象编程之类与对象&quot;&gt;&lt;a href=&quot;#python面向对象编程之类与对象&quot; class=&quot;headerlink&quot; title=&quot;python面向对象编程之类与对象&quot;&gt;&lt;/a&gt;python面向对象编程之类与对象&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;类的语法：&lt;br&gt;class 类名:&lt;br&gt;   类的解释文档&lt;br&gt;   类方法(功能)，类属性(特征)&lt;br&gt;   def 方法名():  pass&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="面向对象编程" scheme="https://gracesoul.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python" scheme="https://gracesoul.github.io/tags/python/"/>
    
      <category term="类与对象" scheme="https://gracesoul.github.io/tags/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>python断言方法</title>
    <link href="https://gracesoul.github.io/2019/05/20/python%E6%96%AD%E8%A8%80%E6%96%B9%E6%B3%95/"/>
    <id>https://gracesoul.github.io/2019/05/20/python断言方法/</id>
    <published>2019-05-20T10:30:13.000Z</published>
    <updated>2019-05-20T10:48:02.969Z</updated>
    
    <content type="html"><![CDATA[<h4 id="python-之常用的断言方法Assert"><a href="#python-之常用的断言方法Assert" class="headerlink" title="python 之常用的断言方法Assert"></a>python 之常用的断言方法Assert</h4><ol><li>断言：是在执行自动化脚本中，判断测试用例的测试结果的过程使用的方法 </li><li>基本的断言方法提供了测试结果是True还是False。所有的断言方法都有一个msg参数，如果指定msg参数的值，则将该信息作为失败的错误信息返回<a id="more"></a><img src="/2019/05/20/python断言方法/lab.png" alt="断言"><br>在unittest包里面看到的比较全的断言：<br><img src="/2019/05/20/python断言方法/lab1.png" alt="断言"></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;python-之常用的断言方法Assert&quot;&gt;&lt;a href=&quot;#python-之常用的断言方法Assert&quot; class=&quot;headerlink&quot; title=&quot;python 之常用的断言方法Assert&quot;&gt;&lt;/a&gt;python 之常用的断言方法Assert&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;断言：是在执行自动化脚本中，判断测试用例的测试结果的过程使用的方法 &lt;/li&gt;
&lt;li&gt;基本的断言方法提供了测试结果是True还是False。所有的断言方法都有一个msg参数，如果指定msg参数的值，则将该信息作为失败的错误信息返回&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="python之断言方法" scheme="https://gracesoul.github.io/categories/python%E4%B9%8B%E6%96%AD%E8%A8%80%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="python" scheme="https://gracesoul.github.io/tags/python/"/>
    
      <category term="断言方法" scheme="https://gracesoul.github.io/tags/%E6%96%AD%E8%A8%80%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>SQL数据库操作之简单操作命令</title>
    <link href="https://gracesoul.github.io/2019/05/20/SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E4%B9%8B%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
    <id>https://gracesoul.github.io/2019/05/20/SQL数据库操作之简单操作命令/</id>
    <published>2019-05-20T06:30:05.000Z</published>
    <updated>2019-05-20T10:20:02.290Z</updated>
    
    <content type="html"><![CDATA[<h4 id="MySQL数据库操作的命令之简单语法汇总"><a href="#MySQL数据库操作的命令之简单语法汇总" class="headerlink" title="MySQL数据库操作的命令之简单语法汇总"></a>MySQL数据库操作的命令之简单语法汇总</h4><p>SQL由两部分组成：数据操作语言(DML),数据定义语言(DDL)<br>DML:</p><ol><li>select (查询)</li><li>update (更新)</li><li>delete (删除)</li><li>insert into (插入)<a id="more"></a></li></ol><p>DDL:</p><ol><li>create database (新建数据库)</li><li>alter database (修改数据库)</li><li>create table (新建表)</li><li>alter table (修改表)</li><li>drop table (删除表)</li><li>create index (创建索引)</li><li>drop index (删除索引)</li></ol><p>语法分析：</p><ol><li><p>select语法</p><ol><li>select 列表名 from 表名   从数据库中查询某一列的值</li><li>(select * from 表名)      从数据库中查询所有</li><li>select distinct 列表名 from 表名  关键词 DISTINCT 用于返回唯一不同的值(去掉重复的值)</li><li><p>select 列表名 from 表名 where 列表名 运算符 值 (值为字符，用单双引号都可以，值为数值，不需要引号)</p></li><li><p>select 列表名 from 表名 where 列表名 运算符 值 and/or 列表名 运算符 值<br> 运算符  and  or (and 全真为真  or 全假为假)<br> and: 若第一个条件和第二个条件都成立，则and运算符显示一条记录<br> or: 若多个条件中只要有一个条件成立，则or运算符显示一条记录</p></li><li>select 列表名 from 表名 order by 列表名<br> select 列表名 from 表名 order by 列表名 DESC<br> order by 语句根据指定的列 对结果进行排序（默认升序排序 ASC）,降序排序 使用关键字DESC</li></ol></li><li>insert into 语法<ol><li>insert into 表名 values (值1,值2,…..)  向表中插入新的行(值全部要根据列 完整填写)</li><li>insert into 表名(列1,列2,…)values(值1,值2,….)  指定要插入数据的列</li></ol></li><li>update语法<ol><li>update 表名 set 列名 = 新值 where 列名 = 某值  (修改表中的某一列的数据)</li><li>update 表名 set 列名1 = 新值,列名2 = 新值,… where 列名 = 某一值 (更新某一行中的若干列数据)</li></ol></li><li>delete语法<ol><li>delete from 表名 where 列名 = 值  (删除某一行)</li><li>delete from 表名 / delete * from 表名  (删除所有行)</li></ol></li><li>like 操作符语法<ol><li>select * from 表名 where 列名 like ‘’(模式 也就是 通配符)</li></ol></li><li>in 操作符语法<ol><li>select 列名 from 表名 where 列名 in (value1,value2,….) 筛选列名值存在value值中的数据</li></ol></li><li>between操作符语法<ol><li>select * from 表名 where 列名 between value1 and value2 </li><li>BETWEEN … AND 会选取介于两个值之间的数据范围。这些值可以是数值、文本或者日期。(部分会包括临界值)</li></ol></li><li>Alias 操作符语法（别名）<ol><li>select 列名 from 表名 AS 表别名      (指定表的别名)</li><li>select 列名 AS 列别名 from 表名      (指定列的列名)</li><li>使用 SQL，可以为列名称和表名称指定别名（Alias)</li></ol></li><li>Join 联表查询<ol><li>join: 如果表中有至少一个匹配，则返回1行 (加上ON)</li><li>left join :即使右表中没有匹配，也从左表返回所有的行</li><li>right join : 即使左表中没有匹配，也从右表返回所有的行</li><li>full join : 只要其中一个表存在匹配，就返回行 (也称full outer join 外连接)</li><li>inner join : 内连接   (inner join 表2 ON)</li><li>select * from 表1,表2 where 表1.主键 = 表2.key(表1的主键作为表2的外键  值是一样的)</li><li>select * from 表1 inner join 表2 ON 表1.主键 = 表2.key </li><li>SELECT 列名s FROM 表1 INNER JOIN 表2 ON表.列名=表2.列名</li><li>SELECT 列名s FROM 表1 left join 表2 ON表.列名=表2.列名</li><li>SELECT 列名s FROM 表1 right join 表2 ON表.列名=表2.列名</li><li>SELECT 列名s FROM 表1 full join 表2 ON表.列名=表2.列名</li></ol></li><li>union 操作符语法<ol><li>UNION 操作符用于合并两个或多个 SELECT 语句的结果集</li><li>UNION 内部的 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的列的顺序必须相同。</li><li>select 列名s from 表1 union select 列名s from  表2</li><li>UNION 结果集中的列名总是等于 UNION 中第一个 SELECT 语句中的列名</li><li>UNION 命令只会选取不同的值(若两个表中有相同的数值，只取一个 不会全部显示)</li><li>UNION ALL 命令和 UNION 命令几乎是等效的，不过 UNION ALL 命令会列出所有的值。(相同的数值也会打印出来)</li></ol></li><li>create database 语法<ol><li>create database name  (创建数据库)</li></ol></li><li>create table <ol><li>CREATE TABLE 表名称<br>(<br>列名称1 数据类型,<br>列名称2 数据类型,<br>列名称3 数据类型,<br>….<br>)</li><li>用于创建数据库中的表</li></ol></li><li>SQL约束<ol><li>not null  强制列不接受 NULL 值 (如果不向字段添加值，就无法插入新记录或者更新记录)</li><li>union  约束唯一标识数据库表中的每条记录  最后加上UNIQUE (列名)</li><li>primary key 主键 主键必须包含唯一的值，主键列不能包含 NULL 值，每个表都应该有一个主键，并且每个表只能有一个主键。</li><li>foreign key</li><li>check</li><li>default</li><li>请注意，每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束。</li><li>如果需要命名 UNIQUE 约束，以及为多个列定义 UNIQUE 约束（CONSTRAINT 取名 UNIQUE (列名1,列名2)）</li><li>当表已被创建时，如需在 “某一” 列创建 UNIQUE 约束 (ALTER TABLE 表名  ADD UNIQUE (Id_P))</li><li>如需命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束 (ALTER TABLE 表名 ADD CONSTRAINT 取名 UNIQUE (列名1,列名2))</li><li>撤销 UNIQUE 约束 (ALTER TABLE 表名 DROP INDEX 取名)</li></ol></li><li>MySQL数据类型<ol><li>文本–》text类型<br><img src="/2019/05/20/SQL数据库操作之简单操作命令/text.png" alt="文本"></li><li>数字–》number类型<br><img src="/2019/05/20/SQL数据库操作之简单操作命令/num.png" alt="数字"></li><li>时间–》date类型<br><img src="/2019/05/20/SQL数据库操作之简单操作命令/date.png" alt="时间"></li></ol></li><li>SQL函数<ol><li>合计函数—aggregate函数<br><img src="/2019/05/20/SQL数据库操作之简单操作命令/lab1.png" alt="函数1"></li><li>纯量函数—scalar函数<br><img src="/2019/05/20/SQL数据库操作之简单操作命令/lab2.png" alt="函数2"></li></ol></li><li>运算符与通配符</li></ol><hr><table><thead><tr><th>操作符</th><th style="text-align:center">描述</th><th></th><th>通配符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>=</td><td style="text-align:center">等于</td><td></td><td>%</td><td style="text-align:center">替代一个或多个字符</td></tr><tr><td>&lt;&gt;</td><td style="text-align:center">不等于(!=)</td><td></td><td>_</td><td style="text-align:center">仅替代一个字符</td></tr><tr><td>&gt;</td><td style="text-align:center">大于</td><td></td><td>[charlist]</td><td style="text-align:center">字符列中的任何单一字符 (like ‘[ALN]%’ 表示匹配以A L N来头的数据 )</td></tr><tr><td>&lt;</td><td style="text-align:center">小于</td><td></td><td>[^charlist]</td><td style="text-align:center">不在字符列中的任何单一字符</td></tr><tr><td>&gt;=</td><td style="text-align:center">大于等于</td><td></td><td>[!charlist]</td><td style="text-align:center">不在字符列中的任何单一字符</td></tr><tr><td>&lt;=</td><td style="text-align:center">小于等于</td></tr><tr><td>BETWEEN</td><td style="text-align:center">在某个范围内</td></tr><tr><td>LIKE</td><td style="text-align:center">搜索某种模式</td></tr></tbody></table><hr><h5 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h5><ol><li>group by 与 where 一起使用时候： where 一定在 group by 之前</li><li>having 只能在 group by 后面，对分组后的结果进行筛选 (使用having的前提条件： 分组)</li><li>where 后的表达式 不允许使用 聚合函数</li><li>having 可以使用聚合函数</li><li>where group by  having  order by  执行顺序</li><li>order by 默认升序排序，后面必须是要排序的列名，也可以多个列名</li><li>group by 分组 必须有聚合函数（sum(),count(),avg()）配合使用</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;MySQL数据库操作的命令之简单语法汇总&quot;&gt;&lt;a href=&quot;#MySQL数据库操作的命令之简单语法汇总&quot; class=&quot;headerlink&quot; title=&quot;MySQL数据库操作的命令之简单语法汇总&quot;&gt;&lt;/a&gt;MySQL数据库操作的命令之简单语法汇总&lt;/h4&gt;&lt;p&gt;SQL由两部分组成：数据操作语言(DML),数据定义语言(DDL)&lt;br&gt;DML:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;select (查询)&lt;/li&gt;
&lt;li&gt;update (更新)&lt;/li&gt;
&lt;li&gt;delete (删除)&lt;/li&gt;
&lt;li&gt;insert into (插入)&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="数据库操作语法" scheme="https://gracesoul.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E8%AF%AD%E6%B3%95/"/>
    
    
      <category term="数据库" scheme="https://gracesoul.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="语法" scheme="https://gracesoul.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>接口自动化面试题</title>
    <link href="https://gracesoul.github.io/2019/05/20/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://gracesoul.github.io/2019/05/20/接口自动化面试题/</id>
    <published>2019-05-20T02:16:02.000Z</published>
    <updated>2019-05-20T03:25:18.486Z</updated>
    
    <content type="html"><![CDATA[<h4 id="自动化测试之接口面试题"><a href="#自动化测试之接口面试题" class="headerlink" title="自动化测试之接口面试题"></a>自动化测试之接口面试题</h4><p>题目汇集：</p><ol><li>json和字典的区别？ -<strong><em>对基础数据类型的考察</em></strong></li><li>测试的数据你放在哪？ -<strong>数据与脚本分离</strong></li><li>参数化 - <strong>数据驱动模式</strong></li><li>下个接口请求参数依赖上个接口的返回数据 - <strong>参数关联</strong></li><li>依赖于登录的接口如何处理 -<strong>token和session的管理</strong><a id="more"></a> </li><li>依赖第三方的接口如何处理 -<strong>mock模拟数据返回</strong></li><li>不可逆的操作，如何处理，比如删除一个订单这种接口如何测试 -<strong>造数据</strong></li><li>接口产生的垃圾数据如何清理 - 数据清理</li><li>一个订单的几种状态如何全部测到，如：未处理，处理中，处理失败，处理成功 - <strong>造数据，改数据库订单状态</strong></li><li>python如何连接数据库操作？-<strong>数据库的连接操作</strong></li><li>其它的就是运行出报告、代码管理（git）、运行策略和持续集成jenkins相关了</li></ol><hr><p>题目解答：   </p><ol><li>json和字典的区别？<br>json() 本质是字符串 str类型,是一种按照key:value键值对格式的字符串<br>字典：是python语言中的一种数据类型(int str,float,bool,dict,tuple,list)</li><li>测试的数据你放在哪？<br>1对于账号密码，这种管全局的参数，可以用命令行参数，单独抽出来，写的配置文件里（如ini）<br>2对于一些一次性消耗的数据，比如注册，每次注册不一样的数，可以用随机函数生成<br>3.对于一个接口有多组测试的参数，可以参数化，数据放yaml,text,json,excel都可以<br>4.对于可以反复使用的数据，比如订单的各种状态需要造数据的情况，可以放到数据库，每次数据初始化，用完后再清理<br>5.对于邮箱配置的一些参数，可以用ini配置文件<br>6.对于全部是独立的接口项目，可以用数据驱动方式，用excel/csv管理测试的接口数据<br>7.对于少量的静态数据，比如一个接口的测试数据，也就2-3组，可以写到py脚本的开头，十年八年都不会变更的<br>总之不同的测试数据，可以用不同的文件管理</li><li>什么是数据驱动，如何做参数化?<br>使用装饰器，ddt,data,unpack ddt装饰测试类，data装饰测试方法，unpack 拆包，将需要修改的数据进行参数化，方便后期数据的操作<br>参数化的思想是代码用例写好了后，不需要改代码，只需维护测试数据就可以了，并且根据不同的测试数据生成多个用例</li><li>下个接口请求参数依赖上个接口的返回数据？<br>1.不同的接口封装成不同的函数或方法，需要的数据return出来，用一中间变量a去接受，后面的接口传a就可以了<br>2.使用反射机制，将上一个接口返回的数据 作为一个入参 传到下一个接口中。setattr,将返回的数据存到一个变量中</li><li>依赖于登录的接口如何处理？<br>1.登录接口依赖token的，可以先登录后，token存到一个yaml或者json，或者ini的配置文件里面，后面所有的请求去拿这个数据就可以全局使用了<br>2.如果是cookies的参数，可以用session自动关联 s=requires.session() 然后根据get/post方法，进行调用（s.get()）自动关联session</li><li>依赖第三方的接口如何处理?<br>使用mock机制,去搭建一个mock服务，模拟接口返回数据</li><li>不可逆的操作，如何处理，比如删除一个订单这种接口如何测试?<br>考查造数据的能力，接口的请求数据，很多都是需要依赖前面一个状态的。<br>比如工作流这种，流向不同的人状态不一样，操作权限不一样，测试的时候，每种状态都要测到,就需要自己会造数据了。<br>平常手工测试造数据，直接在数据库改字段状态。那么自动化也是一样，造数据可以用python连数据库了，做增删改查的操作<br>测试用例前置操作，setUp做数据准备<br>后置操作，tearDown做数据清理</li><li>接口产生的垃圾数据如何清理？<br>造数据和数据清理，需用python连数据库了，做增删改查的操作<br>测试用例前置操作，setUp做数据准备<br>后置操作，tearDown做数据清理</li><li>一个订单的几种状态如何全部测到，如：未处理，处理中，处理失败，处理成功<br>创造数据，修改数据的类型</li><li>python如何连接数据库操作？<br>import pymysql(根据公司的数据库的类型进行连接) db=pymysql.connect(user=’’,password=’’,host=’’,db_name=’’,port=’’)<br>使用cursor()方法获取操作游标 cursor=db.cursor()  SQL 查询语句:sql=’’  执行SQL语句：cursor.execute(sql)   获取结果：result=cursor.fetchone()<br>cursor.close() db.close()<br>1.新建连接，数据库的连接信息<br>2.新建查询界面<br>3.编写SQL语句<br>4.执行SQL语句<br>5.查看结果<br>6.关闭查询<br>7.关闭数据库的连接</li><li>git 将代码上传到github上  git add –all   git commit ‘注释’   git push<br>git 将github上的代码拉下来 git clone ‘github的项目地址’<br>jenkin持续集成，发生邮件等</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;自动化测试之接口面试题&quot;&gt;&lt;a href=&quot;#自动化测试之接口面试题&quot; class=&quot;headerlink&quot; title=&quot;自动化测试之接口面试题&quot;&gt;&lt;/a&gt;自动化测试之接口面试题&lt;/h4&gt;&lt;p&gt;题目汇集：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;json和字典的区别？ -&lt;strong&gt;&lt;em&gt;对基础数据类型的考察&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;测试的数据你放在哪？ -&lt;strong&gt;数据与脚本分离&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;参数化 - &lt;strong&gt;数据驱动模式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;下个接口请求参数依赖上个接口的返回数据 - &lt;strong&gt;参数关联&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;依赖于登录的接口如何处理 -&lt;strong&gt;token和session的管理&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="接口面试题" scheme="https://gracesoul.github.io/categories/%E6%8E%A5%E5%8F%A3%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="自动化测试" scheme="https://gracesoul.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="接口" scheme="https://gracesoul.github.io/tags/%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>自动化测试框架的知识梳理</title>
    <link href="https://gracesoul.github.io/2019/05/17/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E7%9A%84%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
    <id>https://gracesoul.github.io/2019/05/17/自动化测试框架的知识梳理/</id>
    <published>2019-05-17T09:23:32.000Z</published>
    <updated>2019-05-17T10:30:49.920Z</updated>
    
    <content type="html"><![CDATA[<h4 id="自动化测试框架的知识梳理"><a href="#自动化测试框架的知识梳理" class="headerlink" title="自动化测试框架的知识梳理"></a>自动化测试框架的知识梳理</h4><ol><li>框架的意义：可读性，可维护性，可扩展性<ol><li>维护与代码分离：使用数据驱动(ddt)</li><li>结构分层：数据层(testcase文件夹)，用例层(data文件夹)，逻辑层(common文件夹)<a id="more"></a></li></ol></li><li>测试的步骤：      <ol><li>准备测试数据：设计excel，excel数据的读写，参数化替换    </li><li>发起请求：判断请求的方式，请求的url(url的拼接)，参数转为字典（case.data）eval()，拿到返回结果   </li><li>解析结果：断言，响应码，响应结果，响应文本，回写测试结果到Excel</li></ol></li><li>框架的好处：   <ol><li>手工测试用例与自动用例完美结合，避免重复工作</li><li>配置灵活，根据需要快速选择执行用例/切换测试环境(不同的环境，测试环境，线上环境，设置一个总开关，决定使用的环境)</li><li>常用功能封装，逻辑清楚，易于维护(结构分层)</li><li>统一执行入口，管理测试用例集(run.py入口，生成测试报告 )   </li><li>持续集成，定时构建，快速反馈(jenkins) 代码上传到git上，持续集成到jenkins上，发邮件快速反馈结果</li></ol></li><li>项目使用到的技术与框架：    <ol><li>语言：python(语言简洁)</li><li>测试框架：unittest</li><li>接口调用：requests(API 非常简洁)</li><li>数据驱动：ddt(装饰器：ddt(装饰测试类),data(装饰测试方法),unpack())</li><li>数据管理：openpyxl(可以同时支持读与写) excel 写测试用例(exel,csv,json,yaml,txt) 数据库-&gt;数据数量很大的时候</li><li>数据库交互：pymysql(数据库：MySql)</li><li>数据格式的转换：eval(), json.loads() Excel读取出来的数据都是 str ，request方法的参数要求是：dict</li><li>日志处理：logging 清晰的了解执行的过程，快速定位问题(创建日志收集器)</li><li>持续集成：jenkins 解决重复发版本带来的重复工作 （配置git-》拉代码-》run-&gt;发邮件）</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;自动化测试框架的知识梳理&quot;&gt;&lt;a href=&quot;#自动化测试框架的知识梳理&quot; class=&quot;headerlink&quot; title=&quot;自动化测试框架的知识梳理&quot;&gt;&lt;/a&gt;自动化测试框架的知识梳理&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;框架的意义：可读性，可维护性，可扩展性&lt;ol&gt;
&lt;li&gt;维护与代码分离：使用数据驱动(ddt)&lt;/li&gt;
&lt;li&gt;结构分层：数据层(testcase文件夹)，用例层(data文件夹)，逻辑层(common文件夹)&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="自动化测试框架" scheme="https://gracesoul.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="自动化测试，框架" scheme="https://gracesoul.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%EF%BC%8C%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>自动化测试编程题</title>
    <link href="https://gracesoul.github.io/2019/05/17/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
    <id>https://gracesoul.github.io/2019/05/17/自动化测试编程题/</id>
    <published>2019-05-17T08:40:06.000Z</published>
    <updated>2019-05-20T03:26:49.500Z</updated>
    
    <content type="html"><![CDATA[<h4 id="python自动化测试面试—编程题"><a href="#python自动化测试面试—编程题" class="headerlink" title="python自动化测试面试—编程题"></a>python自动化测试面试—编程题</h4><ol><li>搜索引擎中会对用户输入的数据进行处理，第一步就是词法分析，分离字符串中的数字、中文、拼音、符号。比如这个字符串：我的是名字是ths,今年18岁<br>语法分析后得到结果如下： 请编写程序实现该词法分析功能。<br>数字：18<br>中文：我的名字是 今年 岁<br>拼音：ths<br>符号：，。<a id="more"></a></li></ol><hr><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">方法一：使用<span class="built_in">string</span> 模块</span><br><span class="line">import <span class="built_in">string</span></span><br><span class="line"><span class="keyword">number</span>=[]</span><br><span class="line">chinese = []</span><br><span class="line">english=[]</span><br><span class="line">symbol=[]</span><br><span class="line">def find_data(s):</span><br><span class="line"><span class="keyword">for</span> i in <span class="variable">s:</span></span><br><span class="line">    <span class="keyword">if</span> i in <span class="built_in">string</span>.digit<span class="variable">s:</span></span><br><span class="line">        <span class="keyword">number</span>.<span class="keyword">append</span>(i)</span><br><span class="line">    elif i in <span class="built_in">string</span>.ascii_letter<span class="variable">s:</span></span><br><span class="line">        english.<span class="keyword">append</span>(i)</span><br><span class="line">    elif i in <span class="built_in">string</span>.punctuation:</span><br><span class="line">        symbol.<span class="keyword">append</span>(i)</span><br><span class="line">    elif i in <span class="built_in">string</span>.whitespace:</span><br><span class="line">        symbol.<span class="keyword">append</span>(i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        chinese.<span class="keyword">append</span>(i)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'数字是：&#123;&#125;'</span>.format(<span class="string">''</span>.<span class="keyword">join</span>(<span class="keyword">number</span>)))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'中文是：&#123;&#125;'</span>.format(<span class="string">''</span>.<span class="keyword">join</span>(chinese)))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'字母是：&#123;&#125;'</span>.format(<span class="string">''</span>.<span class="keyword">join</span>(english)))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'符号是：&#123;&#125;'</span>.format(<span class="string">''</span>.<span class="keyword">join</span>(symbol)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">in_data = <span class="built_in">input</span>(<span class="string">'请输入你要解析的字符串：'</span>)</span><br><span class="line">find_data(in_data)</span><br></pre></td></tr></table></figure><hr><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">方法二：使用正则方法</span><br><span class="line">import re</span><br><span class="line">def find_data_re(s):</span><br><span class="line">patter = &#123;<span class="string">"数字"</span>:<span class="string">"\d"</span>,<span class="string">"字母"</span>:<span class="string">"[a-zA-Z]"</span>,<span class="string">"汉字"</span>:<span class="string">"[\u4e00-\u9fff]"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> patter.items():</span><br><span class="line">    # <span class="built_in">print</span>(<span class="string">'键的内容：&#123;&#125;'</span>.<span class="built_in">format</span>(k))</span><br><span class="line">    # <span class="built_in">print</span> (<span class="string">'值的内容：&#123;&#125;'</span>.<span class="built_in">format</span> (v))</span><br><span class="line">    # 取字典中的value值</span><br><span class="line">    result = re.findall(v,s)</span><br><span class="line">    <span class="built_in">print</span>(k+<span class="string">':'</span>+<span class="string">''</span>.join(result))</span><br><span class="line">    s = re.<span class="built_in">sub</span>(v,<span class="string">''</span>,s)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'符号：&#123;&#125;'</span>.<span class="built_in">format</span>(s))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">in_data = <span class="built_in">input</span>(<span class="string">'请输入你要解析的字符串：'</span>)</span><br><span class="line">find_data_re(in_data)</span><br></pre></td></tr></table></figure><ol start="2"><li>编写程序实现:根据输入的数字打印菱形</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="number">5</span>，输出：</span><br><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br><span class="line">n=<span class="number">6</span>，输出：</span><br><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br><span class="line">n为任意大于<span class="number">1</span>的正整数</span><br><span class="line"></span><br><span class="line"><span class="comment"># 理解题意</span></span><br><span class="line"><span class="comment"># 1.行数=输入的数 n=5-&gt;有5行</span></span><br><span class="line"><span class="comment"># 2.*的个数 2n-1 n=1 第一行 2*1-1=1 第一行一个*</span></span><br><span class="line"><span class="comment"># 3.星号+空格=输入的数字n</span></span><br><span class="line"><span class="comment"># 4.前面的空格数 = 后面的空格数 = （n-星号数）/2 = 单边空格个数 (n=输入的数)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_star</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="comment"># 前半部分</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">2</span>):  <span class="comment"># 步调为 2  第一行1 第二行3</span></span><br><span class="line">        star_num = <span class="string">' '</span>*((n-i)//<span class="number">2</span>)+<span class="string">'*'</span>*i         <span class="comment"># ' '*((n-i)//2) 前面的空格数目</span></span><br><span class="line">        print(star_num)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n%<span class="number">2</span> == <span class="number">0</span>:   <span class="comment"># n为偶数</span></span><br><span class="line">        s = n<span class="number">-1</span>    <span class="comment"># n=6 那么下部分第一行只打印5个，所以打印 n-1</span></span><br><span class="line">    <span class="keyword">else</span>:          <span class="comment"># n 为奇数</span></span><br><span class="line">        s = n<span class="number">-2</span>    <span class="comment"># 比如n=5,那么下半部份，第一行只打印3个 所以打印n-2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 后半部分</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(s,<span class="number">0</span>,<span class="number">-2</span>):</span><br><span class="line">        star_num = <span class="string">' '</span> * ((n - i) // <span class="number">2</span>) + <span class="string">'*'</span> * i</span><br><span class="line">        print(star_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print_star(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>传入一个Json串，返回一个字典，字典只取出Json最底层的数据，中间如果有字符串也要进行处理，<br>请以下面的数据为例，请用递归方法实现<br>Json：{“a”:”aa”,”b”:[‘{“c”:”cc”,”d”:”dd”}’,{“f”:{“e”:”ee”}}]}<br>输出：<br>Dic:{‘a’:’aa’,’c’:’cc’,’d’:’dd’,’e’:’ee’}</li></ol><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">def</span> str_to_dict(<span class="type">S</span>):   # <span class="type">S</span> 是一个json字符串</span><br><span class="line">    dict_result=&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="class"><span class="keyword">type</span>(<span class="type">S</span>)== str: # <span class="type">S</span> 是字符串 直接处理字符串</span></span><br><span class="line">        <span class="type">S</span> = eval(<span class="type">S</span>)   # （字符串转为字典 不传给dict_result(因为字典里面还有其他的数据类型)）</span><br><span class="line">        print('eval()后的<span class="type">S</span>的值：&#123;&#125;,类型是：&#123;&#125;'.format(<span class="type">S</span>,<span class="class"><span class="keyword">type</span>(<span class="type">S</span>)))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="class"><span class="keyword">type</span> (<span class="type">S</span>) == list:  # 判断是否是列表，遍历列表里面的内容</span></span><br><span class="line">        for i <span class="keyword">in</span> <span class="type">S</span>:</span><br><span class="line">            d = str_to_dict(i)</span><br><span class="line">            dict_result.update(d)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="class"><span class="keyword">type</span>(<span class="type">S</span>)==dict:   # 判断是否是字典</span></span><br><span class="line">        for k,v <span class="keyword">in</span> <span class="type">S</span>.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="class"><span class="keyword">type</span>(<span class="title">v</span>)==list or <span class="keyword">type</span>(<span class="title">v</span>)==dict:  # 字典里面镶嵌着列表或者字典</span></span><br><span class="line">                d= str_to_dict(v)               # （字典里面有列表和字典里面有字典）</span><br><span class="line">                dict_result.update(d)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dict_result[k]=v      # 单纯是字典，就直接存在dict_result字典中</span><br><span class="line">    return dict_result  # 返回底层字典</span><br><span class="line"> <span class="keyword">if</span> __name__ == '__main__':</span><br><span class="line">    <span class="type">J</span>='&#123;<span class="string">"a"</span>:<span class="string">"aa"</span>,<span class="string">"b"</span>:[\'&#123;<span class="string">"c"</span>:<span class="string">"cc"</span>,<span class="string">"d"</span>:<span class="string">"dd"</span>&#125;\',&#123;<span class="string">"f"</span>:&#123;<span class="string">"e"</span>:<span class="string">"ee"</span>&#125;&#125;]&#125;'</span><br><span class="line">    dict = str_to_dict(<span class="type">J</span>)</span><br><span class="line">    print(dict)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;python自动化测试面试—编程题&quot;&gt;&lt;a href=&quot;#python自动化测试面试—编程题&quot; class=&quot;headerlink&quot; title=&quot;python自动化测试面试—编程题&quot;&gt;&lt;/a&gt;python自动化测试面试—编程题&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;搜索引擎中会对用户输入的数据进行处理，第一步就是词法分析，分离字符串中的数字、中文、拼音、符号。比如这个字符串：我的是名字是ths,今年18岁&lt;br&gt;语法分析后得到结果如下： 请编写程序实现该词法分析功能。&lt;br&gt;数字：18&lt;br&gt;中文：我的名字是 今年 岁&lt;br&gt;拼音：ths&lt;br&gt;符号：，。&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="自动化面试编程题" scheme="https://gracesoul.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%9D%A2%E8%AF%95%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
    
    
      <category term="自动化测试" scheme="https://gracesoul.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="编程题" scheme="https://gracesoul.github.io/tags/%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>jenkins部署python项目踩得坑</title>
    <link href="https://gracesoul.github.io/2019/05/10/jenkins%E9%83%A8%E7%BD%B2python%E9%A1%B9%E7%9B%AE%E8%B8%A9%E5%BE%97%E5%9D%91/"/>
    <id>https://gracesoul.github.io/2019/05/10/jenkins部署python项目踩得坑/</id>
    <published>2019-05-10T09:15:23.000Z</published>
    <updated>2019-05-20T03:28:46.308Z</updated>
    
    <content type="html"><![CDATA[<h4 id="jenkins部署python项目踩的坑"><a href="#jenkins部署python项目踩的坑" class="headerlink" title="jenkins部署python项目踩的坑"></a>jenkins部署python项目踩的坑</h4><h5 id="项目：webservice项目部署到jenkins中，需要安装python项目中所需要的依赖环境"><a href="#项目：webservice项目部署到jenkins中，需要安装python项目中所需要的依赖环境" class="headerlink" title="项目：webservice项目部署到jenkins中，需要安装python项目中所需要的依赖环境"></a>项目：webservice项目部署到jenkins中，需要安装python项目中所需要的依赖环境</h5><p>在项目中 生成所有需要依赖的库</p><ol><li>pip freeze &gt; requirements.txt<br>在新的环境中 ，将所有的依赖包全部下载下来<a id="more"></a></li><li>pip install -r requirements.txt<h5 id="问题：pip不是内部或外部命令，也不是可运行的程序或批处理文件"><a href="#问题：pip不是内部或外部命令，也不是可运行的程序或批处理文件" class="headerlink" title="问题：pip不是内部或外部命令，也不是可运行的程序或批处理文件"></a>问题：pip不是内部或外部命令，也不是可运行的程序或批处理文件</h5> <img src="/2019/05/10/jenkins部署python项目踩得坑/error.png" alt="错误界面"></li></ol><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol><li>jenkins配置<br><img src="/2019/05/10/jenkins部署python项目踩得坑/sep1.png" alt="配置界面"></li><li>修改配置方式<br><img src="/2019/05/10/jenkins部署python项目踩得坑/sep2.png" alt="配置界面"></li><li>保存后，点击立即构建 出现上述问题</li><li>检查pip或python是否配置环境变量<br><img src="/2019/05/10/jenkins部署python项目踩得坑/sep3.png" alt="配置界面"></li><li>排除pip或者python未配置环境变量的问题，依旧无法解决上述问题</li></ol><h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><ol><li>win+r 进入终端窗口</li><li>进入该项目从github上pull下来的代码的路径</li><li>输入命令：pip install -r requirements.txt<br><img src="/2019/05/10/jenkins部署python项目踩得坑/sep4.png" alt="配置界面"></li><li>输入命令：python run.py<br><img src="/2019/05/10/jenkins部署python项目踩得坑/sep5.png" alt="配置界面"></li><li>发现终端运行是成功的，但是一样的路径，jenkins 构建 输入Windows批处理命令，运行出错，报pip出错</li><li>一直很奇怪这个问题，百度好久都没有找到解决方案</li><li>再次去查看 依赖包安装成功后的路径 发现suds模块安装到其他目录去了，没有按照到python目录下<br><img src="/2019/05/10/jenkins部署python项目踩得坑/sep6.png" alt="配置界面"></li><li>将生产suds模块的文件夹找到，然后删除</li><li>重新安装 pip install -r requirements.txt</li><li>重新运行 jenkins运行成功</li><li>pip不是内部或外部命令，也不是可运行的程序或批处理文件 该问题完美解决（主要是第一次安装环境的时候，安装目录出错了）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;jenkins部署python项目踩的坑&quot;&gt;&lt;a href=&quot;#jenkins部署python项目踩的坑&quot; class=&quot;headerlink&quot; title=&quot;jenkins部署python项目踩的坑&quot;&gt;&lt;/a&gt;jenkins部署python项目踩的坑&lt;/h4&gt;&lt;h5 id=&quot;项目：webservice项目部署到jenkins中，需要安装python项目中所需要的依赖环境&quot;&gt;&lt;a href=&quot;#项目：webservice项目部署到jenkins中，需要安装python项目中所需要的依赖环境&quot; class=&quot;headerlink&quot; title=&quot;项目：webservice项目部署到jenkins中，需要安装python项目中所需要的依赖环境&quot;&gt;&lt;/a&gt;项目：webservice项目部署到jenkins中，需要安装python项目中所需要的依赖环境&lt;/h5&gt;&lt;p&gt;在项目中 生成所有需要依赖的库&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pip freeze &amp;gt; requirements.txt&lt;br&gt;在新的环境中 ，将所有的依赖包全部下载下来&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="jenkins部署项目" scheme="https://gracesoul.github.io/categories/jenkins%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="jenkins构建" scheme="https://gracesoul.github.io/tags/jenkins%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>重要网址记录大全</title>
    <link href="https://gracesoul.github.io/2019/04/26/%E9%87%8D%E8%A6%81%E7%BD%91%E5%9D%80%E8%AE%B0%E5%BD%95%E5%A4%A7%E5%85%A8/"/>
    <id>https://gracesoul.github.io/2019/04/26/重要网址记录大全/</id>
    <published>2019-04-26T08:27:14.000Z</published>
    <updated>2019-05-20T03:27:11.371Z</updated>
    
    <content type="html"><![CDATA[<h4 id="重要网址记录大全"><a href="#重要网址记录大全" class="headerlink" title="重要网址记录大全"></a>重要网址记录大全</h4><p><a href="https://jenkins.io/download/" target="_blank" rel="noopener">jenkins官网</a><br><a id="more"></a><br>jenkins：<a href="https://jenkins.io/download/" target="_blank" rel="noopener">https://jenkins.io/download/</a><br>外文网（世界级）：<a href="https://www.edx.org" target="_blank" rel="noopener">https://www.edx.org</a><br>慕课网：<a href="http://www.imooc.com/course/list" target="_blank" rel="noopener">http://www.imooc.com/course/list</a><br>w3school（在线编程基础知识）：<a href="http://www.w3cschool.cn/tutorial" target="_blank" rel="noopener">http://www.w3cschool.cn/tutorial</a><br>慕课学院：<a href="http://mooc.guokr.com/course/?dept_id=52&amp;order=hot" target="_blank" rel="noopener">http://mooc.guokr.com/course/?dept_id=52&amp;order=hot</a><br>学堂在线：<a href="http://www.xuetangx.com/" target="_blank" rel="noopener">http://www.xuetangx.com/</a><br>LeetCode Online Judge(英文网，在线编程答疑)：<a href="https://leetcode.com/" target="_blank" rel="noopener">https://leetcode.com/</a><br>mooc中国：<a href="http://www.mooc.cn/" target="_blank" rel="noopener">http://www.mooc.cn/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;重要网址记录大全&quot;&gt;&lt;a href=&quot;#重要网址记录大全&quot; class=&quot;headerlink&quot; title=&quot;重要网址记录大全&quot;&gt;&lt;/a&gt;重要网址记录大全&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://jenkins.io/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jenkins官网&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="网址记录" scheme="https://gracesoul.github.io/categories/%E7%BD%91%E5%9D%80%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="闲谈" scheme="https://gracesoul.github.io/tags/%E9%97%B2%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>jenkins安装</title>
    <link href="https://gracesoul.github.io/2019/04/24/jenkins%E5%AE%89%E8%A3%85/"/>
    <id>https://gracesoul.github.io/2019/04/24/jenkins安装/</id>
    <published>2019-04-24T02:18:14.000Z</published>
    <updated>2019-04-24T02:18:14.488Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python自动化面试一</title>
    <link href="https://gracesoul.github.io/2019/04/22/python%E8%87%AA%E5%8A%A8%E5%8C%96%E9%9D%A2%E8%AF%95%E4%B8%80/"/>
    <id>https://gracesoul.github.io/2019/04/22/python自动化面试一/</id>
    <published>2019-04-22T02:30:35.000Z</published>
    <updated>2019-05-20T03:31:43.354Z</updated>
    
    <content type="html"><![CDATA[<h4 id="常见的python自动化测试的面试题目"><a href="#常见的python自动化测试的面试题目" class="headerlink" title="常见的python自动化测试的面试题目"></a>常见的python自动化测试的面试题目</h4><h4 id="1-给定一个只包含正整数的非空数组-返回该数组中重复次数最多的前N个数字-返回的结果按重复次数从多到少降序排列-N不存在取值非法的情况"><a href="#1-给定一个只包含正整数的非空数组-返回该数组中重复次数最多的前N个数字-返回的结果按重复次数从多到少降序排列-N不存在取值非法的情况" class="headerlink" title="1. 给定一个只包含正整数的非空数组,返回该数组中重复次数最多的前N个数字,返回的结果按重复次数从多到少降序排列(N不存在取值非法的情况)"></a>1. 给定一个只包含正整数的非空数组,返回该数组中重复次数最多的前N个数字,返回的结果按重复次数从多到少降序排列(N不存在取值非法的情况)</h4><a id="more"></a><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">方法一：</span><br><span class="line">def ele_sort(data,n):</span><br><span class="line">    d=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        d[i]=data.count(i) <span class="comment">#将元素出现的次数 作为字典键值对的value值，组成（i:d[i]==&gt;元素：元素出现的次数）</span></span><br><span class="line">    <span class="built_in">print</span><span class="function"><span class="params">(d.items())</span>  #<span class="title">type</span><span class="params">(d.items())</span>--&gt;</span>&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict_items</span>'&gt;</span></span><br><span class="line"></span><br><span class="line">    sort_data = sorted(d.items(),key=lambda item:item[<span class="number">1</span>],reverse=True)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,n):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'排名第&#123;&#125;的元素：&#123;&#125;，出现了&#123;&#125;次'</span>.format(i+<span class="number">1</span>,sort_data[i][<span class="number">0</span>],sort_data[i][<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    l = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line">    n = int(input(<span class="string">'请输入小于元素个数的正整数：'</span>))</span><br><span class="line">    ele_sort(l,n)</span><br></pre></td></tr></table></figure><p>方法二：（使用set集合操作）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def data_sort(data,n):</span><br><span class="line">    data_new = <span class="keyword">set</span>(<span class="keyword">data</span>) <span class="comment">#将重复的数据去掉</span></span><br><span class="line">    d=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data_new:</span><br><span class="line">        d[i]=data.count(i)</span><br><span class="line">    print(d.items())</span><br><span class="line"></span><br><span class="line">    list_data = sorted(d.items(),<span class="keyword">key</span>=lambda item:item[<span class="number">1</span>],<span class="keyword">reverse</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(<span class="number">0</span>,n):</span><br><span class="line">        print(<span class="string">'排名第&#123;&#125;的元素：&#123;&#125;，出现&#123;&#125;次'</span>.format(i+<span class="number">1</span>,list_data[i][<span class="number">0</span>],list_data[i][<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    l = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line">    n=<span class="built_in">int</span>(<span class="keyword">input</span>(<span class="string">'请输入小于元素个数&#123;&#125;的正整数：'</span>.format(<span class="keyword">len</span>(<span class="keyword">set</span>(l)))))</span><br><span class="line">    data_sort(l,n)</span><br></pre></td></tr></table></figure><p>代码难点解读:<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d.items()：</span><br><span class="line">   <span class="number">1</span>. 它的数据类型是：dict_items 以列表返回可遍历的(键, 值) 元组数组  </span><br><span class="line">   <span class="number">2</span>. 注意：返回不是列表：是一个存放多个元祖的高仿列表，[<span class="built_in">(key</span>,<span class="keyword">value</span>),<span class="built_in">(key</span>,<span class="keyword">value</span>),<span class="built_in">(key</span>,<span class="keyword">value</span>)...]</span><br><span class="line">   <span class="number">3</span>. 不能用下标，可用<span class="keyword">for</span>循环</span><br><span class="line">sorted(d.items()<span class="built_in">,key</span>=lambda item:item[<span class="number">1</span>]<span class="built_in">,reverse</span>=True)   </span><br><span class="line">   <span class="number">1</span>. sorted(iterable<span class="built_in">,key</span><span class="built_in">,reverse</span>)函数,参<span class="built_in">数key</span>来决定我们根据那个字段对列表元素进行排序,</span><br><span class="line">   <span class="number">2</span>. sorted(iterable<span class="built_in">，key</span><span class="built_in">，reverse</span>)函数返回一个新列表，其中包含按升序排列的iterable中的所有项</span><br><span class="line">   <span class="number">3</span>.<span class="built_in"> key</span>=lambda 元素: 元素[字段索引]</span><br><span class="line">   <span class="number">4</span>. lambda item:item[<span class="number">1</span>] 表示对元素第二个字段(就是 <span class="keyword">value</span>)进行排序</span><br></pre></td></tr></table></figure></p><h4 id="2-从字符串‘abcdba‘中找出第一个不重复的字符，方法不限"><a href="#2-从字符串‘abcdba‘中找出第一个不重复的字符，方法不限" class="headerlink" title="2. 从字符串‘abcdba‘中找出第一个不重复的字符，方法不限"></a>2. 从字符串‘abcdba‘中找出第一个不重复的字符，方法不限</h4><p>方法一： 使用count()函数 （查看元素在数据中出现的次数）<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def find_ele(<span class="keyword">data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">data</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">data</span>.count(i)==<span class="number">1</span>: #元素在数据<span class="keyword">data</span>出现的次数</span><br><span class="line">            print(<span class="string">'第一个不重复的字符是：&#123;&#125;'</span>.format(i))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s= input(<span class="string">'请输入随意的字符串：'</span>)</span><br><span class="line">    find_ele(s)</span><br></pre></td></tr></table></figure></p><p>方法二： 使用split()切割函数(切割后 长度为2 说明该元素只存在一个)<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def find_ele(<span class="keyword">data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">data</span>:</span><br><span class="line">        <span class="keyword">if</span> len (<span class="keyword">data</span>.split (i)) == <span class="number">2</span>:</span><br><span class="line">            # <span class="keyword">data</span>=<span class="string">'abcdba'</span> <span class="keyword">data</span>.split(a)===&gt;[<span class="string">''</span>,<span class="string">'bcdb'</span>,<span class="string">''</span>], <span class="keyword">data</span>.split(b)===&gt;[<span class="string">'a'</span>,<span class="string">'cd'</span>,<span class="string">'a'</span>]</span><br><span class="line">            print (<span class="string">'第一个不重复的字符是：&#123;&#125;'</span>.format (i))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = input (<span class="string">'请输入随意的字符串：'</span>)</span><br><span class="line">    find_ele (s)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;常见的python自动化测试的面试题目&quot;&gt;&lt;a href=&quot;#常见的python自动化测试的面试题目&quot; class=&quot;headerlink&quot; title=&quot;常见的python自动化测试的面试题目&quot;&gt;&lt;/a&gt;常见的python自动化测试的面试题目&lt;/h4&gt;&lt;h4 id=&quot;1-给定一个只包含正整数的非空数组-返回该数组中重复次数最多的前N个数字-返回的结果按重复次数从多到少降序排列-N不存在取值非法的情况&quot;&gt;&lt;a href=&quot;#1-给定一个只包含正整数的非空数组-返回该数组中重复次数最多的前N个数字-返回的结果按重复次数从多到少降序排列-N不存在取值非法的情况&quot; class=&quot;headerlink&quot; title=&quot;1. 给定一个只包含正整数的非空数组,返回该数组中重复次数最多的前N个数字,返回的结果按重复次数从多到少降序排列(N不存在取值非法的情况)&quot;&gt;&lt;/a&gt;1. 给定一个只包含正整数的非空数组,返回该数组中重复次数最多的前N个数字,返回的结果按重复次数从多到少降序排列(N不存在取值非法的情况)&lt;/h4&gt;
    
    </summary>
    
      <category term="面试笔试题" scheme="https://gracesoul.github.io/categories/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="python" scheme="https://gracesoul.github.io/tags/python/"/>
    
      <category term="自动化测试" scheme="https://gracesoul.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="面试题" scheme="https://gracesoul.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>自动化测试之接口测试</title>
    <link href="https://gracesoul.github.io/2019/04/16/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    <id>https://gracesoul.github.io/2019/04/16/自动化测试之接口测试/</id>
    <published>2019-04-16T08:33:56.000Z</published>
    <updated>2019-05-20T05:30:02.829Z</updated>
    
    <content type="html"><![CDATA[<h4 id="python自动化测试之接口测试"><a href="#python自动化测试之接口测试" class="headerlink" title="python自动化测试之接口测试"></a>python自动化测试之接口测试</h4><h4 id="1-项目框架的分层图"><a href="#1-项目框架的分层图" class="headerlink" title="1. 项目框架的分层图:"></a>1. 项目框架的分层图:</h4><p>   <img src="/2019/04/16/自动化测试之接口测试/level.png" alt="项目层次图"><br><a id="more"></a></p><h4 id="2-1-common文件夹"><a href="#2-1-common文件夹" class="headerlink" title="2.1 common文件夹"></a>2.1 common文件夹</h4><h5 id="2-1-1-do-request-py-发起http请求"><a href="#2-1-1-do-request-py-发起http请求" class="headerlink" title="2.1.1 do_request.py (发起http请求)"></a>2.1.1 do_request.py (发起http请求)</h5><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"><span class="keyword">from</span> interface_test.common.config import ReadConfig</span><br><span class="line">config = ReadConfig()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> HttpRequest:</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    公共使用一个session, cookies自动传递</span></span><br><span class="line"><span class="string">    这是一个操作http请求的类,使用这类的request方法去完成不同的HTTP请求，并且返回响应结果</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    def __init__(<span class="keyword">self</span>):</span><br><span class="line">        #保证同一个session对象,便于cookies的自动传值</span><br><span class="line">        <span class="keyword">self</span>.session = requests.session()</span><br><span class="line"></span><br><span class="line">    def http_request(<span class="keyword">self</span>,<span class="function"><span class="keyword">method</span>,<span class="title">url</span>,<span class="title">data</span>=<span class="title">None</span>,<span class="title">json</span>=<span class="title">None</span>):</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        :param method: 请求的方法</span></span><br><span class="line"><span class="string">        :param url: 请求的路径</span></span><br><span class="line"><span class="string">        :param data: 请求的数据</span></span><br><span class="line"><span class="string">        :param json: json类型的数据</span></span><br><span class="line"><span class="string">        :return: 返回请求响应的文本</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="function"><span class="keyword">method</span> = <span class="title">method</span>.<span class="title">lower</span><span class="params">()</span> #强制转化为小写  方便后期操作（大写也可以）</span></span><br><span class="line"><span class="function">        <span class="title">if</span> <span class="title">type</span><span class="params">(data)</span>==<span class="title">str</span>:</span>   # 将字符串转化为 字典形式的数据</span><br><span class="line">            data = eval(data)</span><br><span class="line"></span><br><span class="line">        # 路径的拼接，根据线上环境或测试环境 进行路径的拼接</span><br><span class="line">        url = config.get_strvalue(<span class="string">'api'</span>,<span class="string">'pre_url'</span>)+url</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'data的数据&#123;&#125;：'</span>.format(data))</span><br><span class="line">        print(<span class="string">'url的路径：'</span>,url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="function"><span class="keyword">method</span> == '<span class="title">get</span>':</span></span><br><span class="line">            resp = <span class="keyword">self</span>.session.request(<span class="function"><span class="keyword">method</span>=<span class="title">method</span>,<span class="title">url</span>=<span class="title">url</span>,<span class="title">params</span>=<span class="title">data</span>)</span></span><br><span class="line"><span class="function">        <span class="title">elif</span> <span class="title">method</span> == '<span class="title">post</span>':</span></span><br><span class="line">            <span class="keyword">if</span> json:</span><br><span class="line">                resp = <span class="keyword">self</span>.session.request(<span class="function"><span class="keyword">method</span>=<span class="title">method</span>,<span class="title">url</span>=<span class="title">url</span>,<span class="title">json</span>=<span class="title">json</span>)</span></span><br><span class="line"><span class="function">            <span class="title">else</span>:</span></span><br><span class="line">                resp = <span class="keyword">self</span>.session.request(<span class="function"><span class="keyword">method</span>=<span class="title">method</span>,<span class="title">url</span>=<span class="title">url</span>,<span class="title">data</span>=<span class="title">data</span>)</span></span><br><span class="line"><span class="function">        <span class="title">else</span>:</span></span><br><span class="line">            print(<span class="string">'暂不支持其他的请求方式!'</span>)</span><br><span class="line">        print (<span class="string">'响应码:'</span>, resp.status_code)</span><br><span class="line">        print (<span class="string">'响应文本:'</span>, resp.text)</span><br><span class="line">        print (<span class="string">'响应的cookie:'</span>, resp.cookies)</span><br><span class="line">        return resp</span><br><span class="line"></span><br><span class="line">    def close(<span class="keyword">self</span>):</span><br><span class="line">        <span class="keyword">self</span>.session.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    # 注册接口</span><br><span class="line">    register_url = <span class="string">'http://test.lemonban.com/futureloan/mvc/api/member/register'</span></span><br><span class="line">    <span class="keyword">params</span> = <span class="comment">&#123;'mobilephone': '18871362019', 'pwd': '123456', 'regname': "test"&#125;</span></span><br><span class="line">    resp = HttpRequest().http_request(<span class="string">'post'</span>,url=register_url,data=<span class="keyword">params</span>)</span><br><span class="line">    print(resp.text)</span><br></pre></td></tr></table></figure><h5 id="2-1-2-do-excel-py-操作Excel的读写"><a href="#2-1-2-do-excel-py-操作Excel的读写" class="headerlink" title="2.1.2 do_excel.py (操作Excel的读写)"></a>2.1.2 do_excel.py (操作Excel的读写)</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import load_workbook</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Case</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.case_id =None</span><br><span class="line">        <span class="keyword">self</span>.title = None</span><br><span class="line">        <span class="keyword">self</span>.url=None</span><br><span class="line">        <span class="keyword">self</span>.data = None</span><br><span class="line">        <span class="keyword">self</span>.method = None</span><br><span class="line">        <span class="keyword">self</span>.expected = None</span><br><span class="line">        <span class="keyword">self</span>.actual = None</span><br><span class="line">        <span class="keyword">self</span>.result = None</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoExcel</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,file_name,sheet_name)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.file_name = file_name</span><br><span class="line">        <span class="keyword">self</span>.sheet_name = sheet_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(<span class="keyword">self</span>)</span></span>: <span class="comment">#Excel的读取数据操作</span></span><br><span class="line">        wb = load_workbook(<span class="keyword">self</span>.file_name)</span><br><span class="line">        sheet = wb[<span class="keyword">self</span>.sheet_name]</span><br><span class="line">        <span class="comment"># 使用类与对象的思想进行操作</span></span><br><span class="line">        cases=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,sheet.max_row+<span class="number">1</span>)<span class="symbol">:</span></span><br><span class="line">            row_case=Case()  <span class="comment">#实例化对象</span></span><br><span class="line">            row_case.case_id = sheet.cell(row=i,column=<span class="number">1</span>).value  <span class="comment">#对象调用属性</span></span><br><span class="line">            row_case.title = sheet.cell (row=i, column=<span class="number">2</span>).value</span><br><span class="line">            row_case.url = sheet.cell (row=i, column=<span class="number">3</span>).value</span><br><span class="line">            row_case.data = sheet.cell (row=i, column=<span class="number">4</span>).value</span><br><span class="line">            row_case.method = sheet.cell (row=i, column=<span class="number">5</span>).value</span><br><span class="line">            row_case.expected = sheet.cell (row=i, column=<span class="number">6</span>).value</span><br><span class="line">            cases.append(row_case)</span><br><span class="line">        wb.close ()</span><br><span class="line">        <span class="keyword">return</span> cases</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_back</span><span class="params">(<span class="keyword">self</span>,row,col,value)</span></span>: <span class="comment">#excel的写回操作</span></span><br><span class="line">        wb = load_workbook(<span class="keyword">self</span>.file_name)</span><br><span class="line">        sheet = wb[<span class="keyword">self</span>.sheet_name]</span><br><span class="line">        sheet.cell(row,col).value = value</span><br><span class="line">        wb.save(<span class="keyword">self</span>.file_name)</span><br><span class="line">        wb.close()</span><br></pre></td></tr></table></figure><h5 id="2-1-3-contants-py-文件的路径"><a href="#2-1-3-contants-py-文件的路径" class="headerlink" title="2.1.3 contants.py (文件的路径)"></a>2.1.3 contants.py (文件的路径)</h5><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">os</span></span><br><span class="line"># <span class="built_in">os</span>.<span class="built_in">path</span>.abspath(__file__) 动态获取当前文件的路径</span><br><span class="line"># <span class="built_in">os</span>.<span class="built_in">path</span>.dirname(<span class="built_in">os</span>.<span class="built_in">path</span>.abspath(__file__)) 动态获取当前文件的上一个文件夹的路径</span><br><span class="line">base_dir = <span class="built_in">os</span>.<span class="built_in">path</span>.dirname(<span class="built_in">os</span>.<span class="built_in">path</span>.dirname(<span class="built_in">os</span>.<span class="built_in">path</span>.abspath(__file__))) #路径到了interface_test</span><br><span class="line"># <span class="built_in">print</span>(base_dir)</span><br><span class="line"></span><br><span class="line"># 测试用例 Excel文件</span><br><span class="line">case_file = <span class="built_in">os</span>.<span class="built_in">path</span>.join(base_dir,<span class="string">'data'</span>,<span class="string">'cases.xlsx'</span>)</span><br><span class="line"># <span class="built_in">print</span>(case_file)</span><br><span class="line"></span><br><span class="line"># 有关线上环境与测试环境的网址切换的配置文件</span><br><span class="line">global_config_file = <span class="built_in">os</span>.<span class="built_in">path</span>.join(base_dir,<span class="string">'config'</span>,<span class="string">'global.cfg'</span>)</span><br><span class="line">online_config_file = <span class="built_in">os</span>.<span class="built_in">path</span>.join(base_dir,<span class="string">'config'</span>,<span class="string">'online.cfg'</span>)</span><br><span class="line">test_config_file = <span class="built_in">os</span>.<span class="built_in">path</span>.join(base_dir,<span class="string">'config'</span>,<span class="string">'test.cfg'</span>)</span><br></pre></td></tr></table></figure><h5 id="2-1-4-config-py-配置文件的读取"><a href="#2-1-4-config-py-配置文件的读取" class="headerlink" title="2.1.4 config.py(配置文件的读取)"></a>2.1.4 config.py(配置文件的读取)</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">from configparser import ConfigParser</span><br><span class="line">from interface_test.common.contants import *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadConfig</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,encoding=<span class="string">'utf-8'</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.cf = ConfigParser() <span class="comment">#打开配置文件</span></span><br><span class="line">        <span class="keyword">self</span>.cf.read(global_config_file,encoding) <span class="comment">#先加载global.cfg配置文件</span></span><br><span class="line">        switch = <span class="keyword">self</span>.cf.getboolean(<span class="string">'switch'</span>,<span class="string">'on'</span>)  <span class="comment">#读取global.cfg配置文件的switch的值</span></span><br><span class="line">        <span class="keyword">if</span> <span class="symbol">switch:</span></span><br><span class="line">            <span class="comment"># on=True 开关打开的时候,加载的是线上环境的配置</span></span><br><span class="line">            <span class="keyword">self</span>.cf.read(online_config_file,encoding)</span><br><span class="line">        <span class="symbol">else:</span></span><br><span class="line">            <span class="keyword">self</span>.cf.read(test_config_file,encoding)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_strvalue</span><span class="params">(<span class="keyword">self</span>,section,option)</span></span>: <span class="comment"># 获取字符串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.cf.get(section,option)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_intvalue</span><span class="params">(<span class="keyword">self</span>,section,option)</span></span>: <span class="comment"># 获取整数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.cf.getint(section,option)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_boolvalue</span><span class="params">(<span class="keyword">self</span>,section,option)</span></span>: <span class="comment"># 获取布尔值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.cf.getboolean(section,option)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span><span class="symbol">:</span></span><br><span class="line">    config = ReadConfig()</span><br><span class="line">    value = config.get_boolvalue(<span class="string">'switch'</span>,<span class="string">'on'</span>)</span><br><span class="line">    <span class="comment"># value = config.get_strvalue('api','pre_url')</span></span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure><h5 id="2-1-5-do-mysql-操作数据库"><a href="#2-1-5-do-mysql-操作数据库" class="headerlink" title="2.1.5 do_mysql(操作数据库)"></a>2.1.5 do_mysql(操作数据库)</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">from interface_test.common.config import ReadConfig</span><br><span class="line">config = ReadConfig ()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoMysql</span>:</span></span><br><span class="line">    <span class="comment"># 1.建立连接</span></span><br><span class="line">    <span class="comment"># 2.新建一个查询界面</span></span><br><span class="line">    <span class="comment"># 3.编写sql语句</span></span><br><span class="line">    <span class="comment"># 4.执行SQL语句</span></span><br><span class="line">    <span class="comment"># 5.查看结果</span></span><br><span class="line">    <span class="comment"># 6.关闭查询</span></span><br><span class="line">    <span class="comment"># 7.关闭数据库 </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># db_host = 'test.lemonban.com'</span></span><br><span class="line">        <span class="comment"># db_user = 'test'</span></span><br><span class="line">        <span class="comment"># db_password = 'test'</span></span><br><span class="line">        <span class="comment"># db_database = 'future'</span></span><br><span class="line">        <span class="comment"># db_port = 3306</span></span><br><span class="line">        <span class="comment"># 读取数据库的配置文件的值（在online.cfg的配置文件中，section：db_test 下的值）</span></span><br><span class="line">        db_host = config.get_strvalue(<span class="string">'db_test'</span>,<span class="string">'db_host'</span>)</span><br><span class="line">        db_user = config.get_strvalue(<span class="string">'db_test'</span>,<span class="string">'db_user'</span>)</span><br><span class="line">        db_password = config.get_strvalue(<span class="string">'db_test'</span>,<span class="string">'db_password'</span>)</span><br><span class="line">        db_database = config.get_strvalue(<span class="string">'db_test'</span>,<span class="string">'db_database'</span>)</span><br><span class="line">        db_port = config.get_intvalue(<span class="string">'db_test'</span>,<span class="string">'db_port'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.db = pymysql.connect (host=db_host, user=db_user, password=db_password,</span><br><span class="line">                                   database=db_database, port=db_port,charset=<span class="string">'utf8'</span>)</span><br><span class="line">        <span class="keyword">self</span>.cursor= <span class="keyword">self</span>.db.cursor ()  <span class="comment"># 创建游标</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetch_one</span><span class="params">(<span class="keyword">self</span>,sql)</span></span>:  <span class="comment"># 查询一条数据</span></span><br><span class="line">        <span class="keyword">self</span>.cursor.execute(sql)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.cursor.fetchone()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetch_all</span><span class="params">(<span class="keyword">self</span>,sql)</span></span>:  <span class="comment"># 查询所有的数据</span></span><br><span class="line">        <span class="keyword">self</span>.cursor.execute(sql)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.cursor.fetchall()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.cursor.close()   <span class="comment"># 关闭查询</span></span><br><span class="line">        <span class="keyword">self</span>.db.close()       <span class="comment"># 关闭数据库连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span><span class="symbol">:</span></span><br><span class="line">    my_sql = DoMysql ()</span><br><span class="line">    sql = <span class="string">'select max(mobilephone) from future.member'</span>  <span class="comment">#获取数据库中最大的手机号</span></span><br><span class="line">    result = my_sql.fetch_one(sql)</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><h5 id="2-1-6-re-context-正则匹配操作"><a href="#2-1-6-re-context-正则匹配操作" class="headerlink" title="2.1.6 re_context(正则匹配操作)"></a>2.1.6 re_context(正则匹配操作)</h5><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="title">from</span> interface_test.common.config <span class="keyword">import</span> ReadConfig</span><br><span class="line"><span class="title">config</span> = <span class="type">ReadConfig</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title">def</span> replace_data(<span class="class"><span class="keyword">data</span>):</span></span><br><span class="line">    # <span class="number">1.</span>正则表达式</span><br><span class="line">    regular = '#(.*?)#'</span><br><span class="line">    # <span class="number">2.</span>查找要匹配的字符串</span><br><span class="line">    # search() 扫描字符串，寻找与模式匹配的字符串,返回匹配对象，如果没有找到匹配，则为<span class="type">None</span></span><br><span class="line">    while re.search(regular,<span class="class"><span class="keyword">data</span>):     # 找到匹配的对象</span></span><br><span class="line">        find_data = re.search (regular, <span class="class"><span class="keyword">data</span>)</span></span><br><span class="line">        find_key = find_data.group(<span class="number">1</span>) # 拿到参数化的<span class="type">KEY</span></span><br><span class="line">        find_value = config.get_strvalue('<span class="class"><span class="keyword">data</span>',find_key) #拿配置文件里面的值</span></span><br><span class="line">        # sub(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>)有返回值</span><br><span class="line">        # pattern正则表达式  repl要替换的数据  string<span class="comment">--》data count 替换的次数</span></span><br><span class="line">        <span class="class"><span class="keyword">data</span> = re.sub(<span class="title">regular</span>,<span class="title">find_value</span>,<span class="title">data</span>,<span class="title">count</span>=1)</span></span><br><span class="line">    return <span class="class"><span class="keyword">data</span></span></span><br></pre></td></tr></table></figure><hr><h4 id="2-2-config文件夹-（配置文件的操作）"><a href="#2-2-config文件夹-（配置文件的操作）" class="headerlink" title="2.2 config文件夹 （配置文件的操作）"></a>2.2 config文件夹 （配置文件的操作）</h4><h5 id="2-2-1-global-cfg（控制线上环境或者测试环境的开关）"><a href="#2-2-1-global-cfg（控制线上环境或者测试环境的开关）" class="headerlink" title="2.2.1 global.cfg（控制线上环境或者测试环境的开关）"></a>2.2.1 global.cfg（控制线上环境或者测试环境的开关）</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[switch]</span></span><br><span class="line"><span class="attr">on</span> = <span class="literal">True</span></span><br><span class="line"><span class="comment">;on = False</span></span><br></pre></td></tr></table></figure><h5 id="2-2-2-online-cfg（线上环境）"><a href="#2-2-2-online-cfg（线上环境）" class="headerlink" title="2.2.2 online.cfg（线上环境）"></a>2.2.2 online.cfg（线上环境）</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[api]</span></span><br><span class="line"><span class="attr">pre_url</span> = http://test.lemonban.com/futureloan/mvc/api</span><br><span class="line"></span><br><span class="line"><span class="section">[db_test]</span></span><br><span class="line"><span class="attr">db_host</span> = test.lemonban.com</span><br><span class="line"><span class="attr">db_user</span> = test</span><br><span class="line"><span class="attr">db_password</span> = test</span><br><span class="line"><span class="attr">db_database</span> = future</span><br><span class="line"><span class="attr">db_port</span> = <span class="number">3306</span></span><br></pre></td></tr></table></figure><h5 id="2-2-3-test-cfg（测试环境）"><a href="#2-2-3-test-cfg（测试环境）" class="headerlink" title="2.2.3 test.cfg（测试环境）"></a>2.2.3 test.cfg（测试环境）</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[api]</span></span><br><span class="line"><span class="attr">pre_url</span> = http://<span class="number">47.107</span>.<span class="number">168.87</span>:<span class="number">8080</span>/futureloan/mvc/api</span><br></pre></td></tr></table></figure><hr><h4 id="2-3-data文件夹（存放测试用例的Excel文件）"><a href="#2-3-data文件夹（存放测试用例的Excel文件）" class="headerlink" title="2.3 data文件夹（存放测试用例的Excel文件）"></a>2.3 data文件夹（存放测试用例的Excel文件）</h4><h5 id="2-3-1-cases-xlsx-（测试用例）"><a href="#2-3-1-cases-xlsx-（测试用例）" class="headerlink" title="2.3.1 cases.xlsx  （测试用例）"></a>2.3.1 cases.xlsx  （测试用例）</h5><ol><li>注册用例<br><img src="/2019/04/16/自动化测试之接口测试/register.png" alt="注册用例"></li><li>登录用例<br><img src="/2019/04/16/自动化测试之接口测试/login.png" alt="登录用例"></li></ol><hr><h4 id="2-4-log文件夹（日志记录文件）"><a href="#2-4-log文件夹（日志记录文件）" class="headerlink" title="2.4 log文件夹（日志记录文件）"></a>2.4 log文件夹（日志记录文件）</h4><h5 id="2-4-1-my-log-py（日志操作）"><a href="#2-4-1-my-log-py（日志操作）" class="headerlink" title="2.4.1 my_log.py（日志操作）"></a>2.4.1 my_log.py（日志操作）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLog</span>:</span></span><br><span class="line">    <span class="string">'''这是一个记录log日志的类'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_log</span><span class="params">(self,level,msg)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        :param level: 日志的等级</span></span><br><span class="line"><span class="string">        :param msg: 需要输出的提示信息</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="comment"># 收集器 - --创建一个日志收集器, getLogger()函数</span></span><br><span class="line">        my_logger = logging.getLogger(<span class="string">'test_request'</span>)</span><br><span class="line">        my_logger.setLevel(<span class="string">'DEBUG'</span>) <span class="comment">#设置等级</span></span><br><span class="line">        <span class="comment">#设定日志输出格式</span></span><br><span class="line">        formatter = logging.Formatter (<span class="string">'%(asctime)s-'</span> <span class="string">'[%(levelname)s]-'</span> <span class="string">'[line:%(lineno)d]-'</span><span class="string">'[日志信息]:%(message)s'</span>)</span><br><span class="line">        <span class="comment">#设定输出渠道---&gt;控制台</span></span><br><span class="line">        sh = logging.StreamHandler()</span><br><span class="line">        sh.setLevel(<span class="string">'ERROR'</span>)</span><br><span class="line">        sh.setFormatter(formatter)</span><br><span class="line">        <span class="comment">#设定输出渠道----&gt;指定文件</span></span><br><span class="line">        fh = logging.FileHandler(<span class="string">'test.log'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        fh.setLevel(<span class="string">'INFO'</span>)</span><br><span class="line">        fh.setFormatter(formatter)</span><br><span class="line">        <span class="comment">#日志收集器与输出渠道进行对接</span></span><br><span class="line">        my_logger.addHandler (sh)</span><br><span class="line">        my_logger.addHandler(fh)</span><br><span class="line">        <span class="keyword">if</span> level == <span class="string">'DEBUG'</span>:</span><br><span class="line">            my_logger.debug(msg)</span><br><span class="line">        <span class="keyword">elif</span> level==<span class="string">'INFO'</span>:</span><br><span class="line">            my_logger.info(msg)</span><br><span class="line">        <span class="keyword">elif</span> level == <span class="string">'WARNING'</span>:</span><br><span class="line">            my_logger.warning(msg)</span><br><span class="line">        <span class="keyword">elif</span> level ==<span class="string">'ERROR'</span>:</span><br><span class="line">            my_logger.error(msg)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            my_logger.critical(msg)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 去掉日志的重复 每次收集完毕之后 移除掉日志收集器</span></span><br><span class="line">        my_logger.removeHandler(sh)</span><br><span class="line">        my_logger.removeHandler(fh)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#重新封装五个不同等级的日志级别的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(self,msg)</span>:</span></span><br><span class="line">        self.my_log(<span class="string">'DEBUG'</span>,msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self,msg)</span>:</span></span><br><span class="line">        self.my_log(<span class="string">'INFO'</span>,msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">warning</span><span class="params">(self,msg)</span>:</span></span><br><span class="line">        self.my_log(<span class="string">'WARNING'</span>,msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">(self,msg)</span>:</span></span><br><span class="line">        self.my_log(<span class="string">'ERROR'</span>,msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">critical</span><span class="params">(self,msg)</span>:</span></span><br><span class="line">        self.my_log(<span class="string">'CRITICAL'</span>,msg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    log = MyLog()</span><br><span class="line">    log.debug(<span class="string">'这是个调试的信息'</span>)</span><br></pre></td></tr></table></figure><hr><h4 id="2-5-report文件夹-（测试报告）"><a href="#2-5-report文件夹-（测试报告）" class="headerlink" title="2.5 report文件夹 （测试报告）"></a>2.5 report文件夹 （测试报告）</h4><h5 id="2-5-1-report-html-这是自动生成的"><a href="#2-5-1-report-html-这是自动生成的" class="headerlink" title="2.5.1 report.html(这是自动生成的)"></a>2.5.1 report.html(这是自动生成的)</h5><hr><h4 id="2-6-testcases文件夹（存放测试用例的方法）"><a href="#2-6-testcases文件夹（存放测试用例的方法）" class="headerlink" title="2.6 testcases文件夹（存放测试用例的方法）"></a>2.6 testcases文件夹（存放测试用例的方法）</h4><h5 id="2-6-1-test-register-py（测试注册接口）"><a href="#2-6-1-test-register-py（测试注册接口）" class="headerlink" title="2.6.1 test_register.py（测试注册接口）"></a>2.6.1 test_register.py（测试注册接口）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> ddt <span class="keyword">import</span> ddt,data</span><br><span class="line"><span class="keyword">from</span> interface_test.common.do_excel <span class="keyword">import</span> DoExcel</span><br><span class="line"><span class="keyword">from</span> interface_test.common.do_request <span class="keyword">import</span> HttpRequest</span><br><span class="line"><span class="keyword">from</span> interface_test.common.contants <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> interface_test.common.do_mysql <span class="keyword">import</span> DoMysql</span><br><span class="line"></span><br><span class="line">do_excel = DoExcel(case_file,<span class="string">'register'</span>)</span><br><span class="line">register_cases = do_excel.get_data()</span><br><span class="line"></span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterTest</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.do_request = HttpRequest()</span><br><span class="line">        cls.mysql = DoMysql ()  <span class="comment"># 创建数据库的连接</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @data(*register_cases)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_register</span><span class="params">(self,case)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> case.data.find(<span class="string">'register_mobile'</span>)&gt;<span class="number">-1</span>: <span class="comment">#测试用例中找到register_mobile</span></span><br><span class="line">            sql = <span class="string">'select max (mobilephone) from future.member'</span></span><br><span class="line">            max_phone = self.mysql.fetch_one(sql)[<span class="number">0</span>] <span class="comment"># 得到的数据是元组，需要取里面的第一个值（索引）</span></span><br><span class="line">            max_phone = int(max_phone)+<span class="number">1</span>  <span class="comment"># 将数据库中最大的手机号+1，保证该手机号未被注册</span></span><br><span class="line">            <span class="comment"># replace()函数 是替换之后重新返回一个新的字符串，有返回值 需要变量去接收</span></span><br><span class="line">            case.data= case.data.replace(<span class="string">'register_mobile'</span>,str(max_phone)) <span class="comment"># 替换参数值</span></span><br><span class="line"></span><br><span class="line">        resp = self.do_request.http_request(case.method,case.url,case.data)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.assertEqual(case.expected,resp.text)</span><br><span class="line">            write_result = <span class="string">'Pass'</span></span><br><span class="line">        <span class="keyword">except</span> AssertionError <span class="keyword">as</span> e:</span><br><span class="line">            write_result = <span class="string">'Failed'</span></span><br><span class="line">            print(<span class="string">'断言出错:&#123;&#125;'</span>.format(e))</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            do_excel.write_back(case.case_id+<span class="number">1</span>,<span class="number">7</span>,resp.text)</span><br><span class="line">            do_excel.write_back(case.case_id+<span class="number">1</span>,<span class="number">8</span>,write_result)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDownClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.do_request.close()</span><br><span class="line">        cls.mysql.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h5 id="2-6-2-test-login-py（测试登录接口）"><a href="#2-6-2-test-login-py（测试登录接口）" class="headerlink" title="2.6.2 test_login.py（测试登录接口）"></a>2.6.2 test_login.py（测试登录接口）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> ddt <span class="keyword">import</span> ddt,data</span><br><span class="line"><span class="keyword">from</span> interface_test.common.do_excel <span class="keyword">import</span> DoExcel</span><br><span class="line"><span class="keyword">from</span> interface_test.common.do_request <span class="keyword">import</span> HttpRequest</span><br><span class="line"><span class="keyword">from</span> interface_test.common.contants <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> interface_test.common.re_context <span class="keyword">import</span> replace_data</span><br><span class="line"></span><br><span class="line">do_excel = DoExcel (case_file, <span class="string">'login'</span>)</span><br><span class="line">login_cases = do_excel.get_data ()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginTest</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.do_request = HttpRequest ()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @data(*login_cases)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_login</span><span class="params">(self,case)</span>:</span></span><br><span class="line">        case.data = replace_data(case.data) <span class="comment">#参数化 正则匹配解析</span></span><br><span class="line">        resp =self.do_request.http_request(case.method,case.url,case.data)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.assertEqual(case.expected,resp.json()[<span class="string">'msg'</span>])</span><br><span class="line">            write_result = <span class="string">'Pass'</span></span><br><span class="line">        <span class="keyword">except</span> AssertionError <span class="keyword">as</span> e:</span><br><span class="line">            write_result = <span class="string">'Failed'</span></span><br><span class="line">            print(<span class="string">'断言错误：&#123;&#125;'</span>.format(e))</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            do_excel.write_back(case.case_id+<span class="number">1</span>,<span class="number">7</span>,resp.text)</span><br><span class="line">            do_excel.write_back(case.case_id+<span class="number">1</span>,<span class="number">8</span>,write_result)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDownClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.do_request.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h5 id="2-6-3-test-recharge-py（测试充值接口）"><a href="#2-6-3-test-recharge-py（测试充值接口）" class="headerlink" title="2.6.3 test_recharge.py（测试充值接口）"></a>2.6.3 test_recharge.py（测试充值接口）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> ddt <span class="keyword">import</span> ddt,data</span><br><span class="line"><span class="keyword">from</span> interface_test.common.do_excel <span class="keyword">import</span> DoExcel</span><br><span class="line"><span class="keyword">from</span> interface_test.common.do_request <span class="keyword">import</span> HttpRequest</span><br><span class="line"><span class="keyword">from</span> interface_test.common.contants <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> interface_test.common.re_context <span class="keyword">import</span> replace_data</span><br><span class="line"></span><br><span class="line">do_excel = DoExcel (case_file, <span class="string">'recharge'</span>)</span><br><span class="line">withdraw_cases = do_excel.get_data ()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithdrawTest</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.do_request = HttpRequest()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @data(*withdraw_cases)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_withdraw</span><span class="params">(self,case)</span>:</span></span><br><span class="line">        case.data = replace_data(case.data) <span class="comment">#参数化 正则匹配解析</span></span><br><span class="line">        resp = self.do_request.http_request(case.method,case.url,case.data)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.assertEqual(case.expected,resp.json()[<span class="string">'msg'</span>])</span><br><span class="line">            write_result = <span class="string">'Pass'</span></span><br><span class="line">        <span class="keyword">except</span> AssertionError <span class="keyword">as</span> e:</span><br><span class="line">            write_result=<span class="string">'Failed'</span></span><br><span class="line">            print(<span class="string">'断言出错：'</span>,e)</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            do_excel.write_back(case.case_id+<span class="number">1</span>,<span class="number">7</span>,resp.text)</span><br><span class="line">            do_excel.write_back(case.case_id+<span class="number">1</span>,<span class="number">8</span>,write_result)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDownClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.do_request.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h5 id="2-6-4-test-withdraw-py（测试取现的接口）"><a href="#2-6-4-test-withdraw-py（测试取现的接口）" class="headerlink" title="2.6.4 test_withdraw.py（测试取现的接口）"></a>2.6.4 test_withdraw.py（测试取现的接口）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> ddt <span class="keyword">import</span> ddt,data</span><br><span class="line"><span class="keyword">from</span> interface_test.common.do_excel <span class="keyword">import</span> DoExcel</span><br><span class="line"><span class="keyword">from</span> interface_test.common.do_request <span class="keyword">import</span> HttpRequest</span><br><span class="line"><span class="keyword">from</span> interface_test.common.contants <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> interface_test.common.re_context <span class="keyword">import</span> replace_data</span><br><span class="line"></span><br><span class="line">do_excel = DoExcel (case_file, <span class="string">'withdraw'</span>)</span><br><span class="line">withdraw_cases = do_excel.get_data ()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithdrawTest</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.do_request = HttpRequest()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @data(*withdraw_cases)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_withdraw</span><span class="params">(self,case)</span>:</span></span><br><span class="line">        case.data = replace_data(case.data) <span class="comment">#参数化 正则匹配解析</span></span><br><span class="line">        resp = self.do_request.http_request(case.method,case.url,case.data)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.assertEqual(case.expected,resp.json()[<span class="string">'msg'</span>])</span><br><span class="line">            write_result = <span class="string">'Pass'</span></span><br><span class="line">        <span class="keyword">except</span> AssertionError <span class="keyword">as</span> e:</span><br><span class="line">            write_result=<span class="string">'Failed'</span></span><br><span class="line">            print(<span class="string">'断言出错：'</span>,e)</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            do_excel.write_back(case.case_id+<span class="number">1</span>,<span class="number">7</span>,resp.text)</span><br><span class="line">            do_excel.write_back(case.case_id+<span class="number">1</span>,<span class="number">8</span>,write_result)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDownClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.do_request.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h5 id="2-6-5-test-addloan-py（测试添加标的接口）"><a href="#2-6-5-test-addloan-py（测试添加标的接口）" class="headerlink" title="2.6.5 test_addloan.py（测试添加标的接口）"></a>2.6.5 test_addloan.py（测试添加标的接口）</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> ddt <span class="keyword">import</span> ddt,data</span><br><span class="line"><span class="keyword">from</span> interface_practice.common.do_request <span class="keyword">import</span> HttpRequest</span><br><span class="line"><span class="keyword">from</span> interface_practice.common.do_excel <span class="keyword">import</span> DoExcel</span><br><span class="line"><span class="keyword">from</span> interface_practice.common.contants <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> interface_test.common.re_context <span class="keyword">import</span> replace_data</span><br><span class="line"></span><br><span class="line">do_excel = DoExcel(case_file,<span class="string">'add_loan'</span>)</span><br><span class="line">addloan_cases = do_excel.get_data()</span><br><span class="line"></span><br><span class="line">@ddt</span><br><span class="line"><span class="keyword">class</span> AddloanTest(unittest.TestCase):</span><br><span class="line">    @classmethod</span><br><span class="line">    <span class="keyword">def</span> setUpClass(cls):</span><br><span class="line">        cls.do_request = HttpRequest()</span><br><span class="line"></span><br><span class="line">    @data(*addloan_cases)</span><br><span class="line">    <span class="keyword">def</span> test_addloan(self,<span class="keyword">case</span>):</span><br><span class="line">        # <span class="keyword">print</span>(<span class="string">'转换前的数据：'</span>,<span class="keyword">case</span>.data) #&#123;<span class="string">"mobilephone"</span>: <span class="string">"#normal_user#"</span>, <span class="string">"pwd"</span>: <span class="string">"#normal_pwd#"</span>&#125;</span><br><span class="line">        <span class="keyword">case</span>.data = replace_data(<span class="keyword">case</span>.data)</span><br><span class="line">        # <span class="keyword">print</span>(<span class="string">'转换后的数据：'</span>,<span class="keyword">case</span>.data) #&#123;<span class="string">"mobilephone"</span>: <span class="string">"17786426991"</span>, <span class="string">"pwd"</span>: <span class="string">"123456"</span>&#125;</span><br><span class="line">        resp = self.do_request.http_request(<span class="keyword">case</span>.method,<span class="keyword">case</span>.url,<span class="keyword">case</span>.data)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.assertEqual(<span class="keyword">case</span>.expected,resp.json()[<span class="string">'msg'</span>])</span><br><span class="line">            write_result = <span class="string">"Pass"</span></span><br><span class="line">        except AssertionError as e:</span><br><span class="line">            write_result=<span class="string">'Failed'</span></span><br><span class="line">            <span class="keyword">print</span>(<span class="string">'断言出错啦:&#123;&#125;'</span>.format(e))</span><br><span class="line">            raise e</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            do_excel.write_back(<span class="keyword">case</span>.case_id+<span class="number">1</span>,<span class="number">7</span>,resp.text)</span><br><span class="line">            do_excel.write_back(<span class="keyword">case</span>.case_id,<span class="number">8</span>,write_result)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    <span class="keyword">def</span> tearDownClass(cls):</span><br><span class="line">        cls.do_request.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h5 id="2-6-6-test-audit-py（测试审核的接口）"><a href="#2-6-6-test-audit-py（测试审核的接口）" class="headerlink" title="2.6.6 test_audit.py（测试审核的接口）"></a>2.6.6 test_audit.py（测试审核的接口）</h5><h5 id="2-6-7-test-bidloan-py（测试投资的接口）"><a href="#2-6-7-test-bidloan-py（测试投资的接口）" class="headerlink" title="2.6.7 test_bidloan.py（测试投资的接口）"></a>2.6.7 test_bidloan.py（测试投资的接口）</h5><h5 id="2-6-8-run-py"><a href="#2-6-8-run-py" class="headerlink" title="2.6.8 run.py"></a>2.6.8 run.py</h5>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;python自动化测试之接口测试&quot;&gt;&lt;a href=&quot;#python自动化测试之接口测试&quot; class=&quot;headerlink&quot; title=&quot;python自动化测试之接口测试&quot;&gt;&lt;/a&gt;python自动化测试之接口测试&lt;/h4&gt;&lt;h4 id=&quot;1-项目框架的分层图&quot;&gt;&lt;a href=&quot;#1-项目框架的分层图&quot; class=&quot;headerlink&quot; title=&quot;1. 项目框架的分层图:&quot;&gt;&lt;/a&gt;1. 项目框架的分层图:&lt;/h4&gt;&lt;p&gt;   &lt;img src=&quot;/2019/04/16/自动化测试之接口测试/level.png&quot; alt=&quot;项目层次图&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="接口测试" scheme="https://gracesoul.github.io/categories/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="python" scheme="https://gracesoul.github.io/tags/python/"/>
    
      <category term="自动化" scheme="https://gracesoul.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="接口测试" scheme="https://gracesoul.github.io/tags/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>hexo与markdown语法简单汇总</title>
    <link href="https://gracesoul.github.io/2019/04/09/hexo%E4%B8%8Emarkdown%E8%AF%AD%E6%B3%95%E7%AE%80%E5%8D%95%E6%B1%87%E6%80%BB/"/>
    <id>https://gracesoul.github.io/2019/04/09/hexo与markdown语法简单汇总/</id>
    <published>2019-04-09T09:02:57.000Z</published>
    <updated>2019-05-20T05:22:36.556Z</updated>
    
    <content type="html"><![CDATA[<h4 id="hexo与markdown语法简单汇总"><a href="#hexo与markdown语法简单汇总" class="headerlink" title="hexo与markdown语法简单汇总"></a>hexo与markdown语法简单汇总</h4><h4 id="hexo语法"><a href="#hexo语法" class="headerlink" title="hexo语法"></a>hexo语法</h4><ol><li>hexo init —&gt;初始化本地文件夹为网站的根目录</li><li>hexo new post’博客名’ = hexo new ‘博客名’;简称:hexo n —&gt;新建文字(默认.md)<a id="more"></a></li><li>hexo generate —&gt; 生成静态文件;简称:hexo g</li><li>hexo deploy —&gt; 用于部署网站;简称:hexo d</li><li>hexo server —&gt; 用于启动本地服务器;简称:hexo s<br>5.1 hexo server -p —&gt;指定服务器端口,默认4000<br>5.2 hexo server -i —&gt;指定服务器ip地址,默认0.0.0.0<br>5.3 hexo server -s —&gt;静态模式,仅提供 public 文件夹中的文件并禁用文件监视</li><li>hexo g -d —&gt;指定生成后部署</li><li>hexo clean —&gt;用于清除缓存文件</li></ol><h4 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h4><ol><li><p>标题<br>1.1 一级标题—&gt;#<br>1.2 二级标题—&gt;##<br>1.3 三级标题—&gt;###<br>1.4 四级标题—&gt;####<br>1.5 五级标题—&gt;#####<br>1.6 六级标题—&gt;######</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure></li><li><p>字体<br>2.1 加粗—&gt;<strong>要加粗的内容</strong><br>2.2 斜体—&gt;<em>要倾斜的内容</em><br>2.3 斜体加粗—&gt;<strong><em>要斜体加粗的内容</em></strong><br>2.4 删除线—&gt;<del>需要加删除线的内容</del>   </p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*<span class="strong">*要加粗的内容*</span><span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>要倾斜的内容<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>*<span class="strong">*要斜体加粗的内容*</span>*<span class="strong">*</span></span><br><span class="line"><span class="strong">~~需要加删除线的内容~~</span></span><br></pre></td></tr></table></figure></li><li><p>引用<br>语法:&gt;需要引用的文字内容</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是引用的内容</span><br><span class="line"><span class="meta">&gt;&gt;</span> 这也是引用的内容</span><br></pre></td></tr></table></figure></li><li><p>分割线<br>-/*三个以上即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span><span class="meta">---</span></span><br><span class="line"><span class="string">***</span></span><br><span class="line"><span class="string">*****</span></span><br></pre></td></tr></table></figure></li><li><p>图片 </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 语法:  </span><br><span class="line">![<span class="string">图片alt</span>](<span class="link">图片地址 "图片title"</span>)---&gt;title可不加</span><br><span class="line"> 例如:</span><br><span class="line">![<span class="string">古风</span>](<span class="link">https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1555065335148&amp;di=e3e3187e01f54cd7bc807b3068230a40&amp;imgtype=0&amp;src=http%3A%2F%2Fp4.gexing.com%2FG1%2FM00%2F3F%2F3D%2FrBACJlTKBjPSVP1XAAEBEKmUep8763.jpg</span>)</span><br></pre></td></tr></table></figure></li><li><p>超链接  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法: </span><br><span class="line">[<span class="string">超链接名</span>](<span class="link">超链接地址 "超链接title"</span>)--&gt;title可不加</span><br><span class="line">例如:</span><br><span class="line">[<span class="string">简书</span>](<span class="link">http://jianshu.com</span>)</span><br><span class="line">[<span class="string">百度</span>](<span class="link">http://baidu.com</span>)</span><br></pre></td></tr></table></figure></li><li><p>列表 </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">7.1</span> 无序列表---&gt;-+*都可以(符号与内容之间都要有一个空格)     </span><br><span class="line">  <span class="number">7.2</span> 有序列表---&gt;数字加点(数字与内容之间也要有空格)</span><br><span class="line">  <span class="number">7.3</span> 列表嵌套---&gt;上一级与下一级之间敲三个空格        </span><br><span class="line">* 测试数据                                    </span><br><span class="line">   - 测试<span class="number">1</span></span><br><span class="line">   + 测试<span class="number">2</span></span><br><span class="line">   - 测试<span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>表格       </p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">姓名|<span class="string">技能</span>|<span class="string">排行</span></span><br><span class="line"><span class="string">--</span>|<span class="string">:--:</span>|<span class="string">--:</span></span><br><span class="line"><span class="string">刘备</span>|<span class="string">哭</span>|<span class="string">大哥</span></span><br><span class="line"><span class="string">关羽</span>|<span class="string">打</span>|<span class="string">二哥</span></span><br><span class="line"><span class="string">张飞</span>|<span class="string">骂</span>|<span class="string">三弟</span></span><br></pre></td></tr></table></figure></li><li><p>代码<br>9.1 单行代码:代码之间分别用一个反引号括起来 <code>单行代码</code><br> <code>单行代码内容</code><br>9.2 多行代码:代码之间分别用三个反引号括起来</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">代码内容</span><br><span class="line">代码内容</span><br><span class="line">代码...</span><br></pre></td></tr></table></figure></li><li><p>流程图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;hexo与markdown语法简单汇总&quot;&gt;&lt;a href=&quot;#hexo与markdown语法简单汇总&quot; class=&quot;headerlink&quot; title=&quot;hexo与markdown语法简单汇总&quot;&gt;&lt;/a&gt;hexo与markdown语法简单汇总&lt;/h4&gt;&lt;h4 id=&quot;hexo语法&quot;&gt;&lt;a href=&quot;#hexo语法&quot; class=&quot;headerlink&quot; title=&quot;hexo语法&quot;&gt;&lt;/a&gt;hexo语法&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;hexo init —&amp;gt;初始化本地文件夹为网站的根目录&lt;/li&gt;
&lt;li&gt;hexo new post’博客名’ = hexo new ‘博客名’;简称:hexo n —&amp;gt;新建文字(默认.md)&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="简单语法汇总" scheme="https://gracesoul.github.io/categories/%E7%AE%80%E5%8D%95%E8%AF%AD%E6%B3%95%E6%B1%87%E6%80%BB/"/>
    
    
      <category term="语法" scheme="https://gracesoul.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="hexo" scheme="https://gracesoul.github.io/tags/hexo/"/>
    
      <category term="markdown" scheme="https://gracesoul.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>python自动化测试面试题</title>
    <link href="https://gracesoul.github.io/2019/04/04/python%E8%87%AA%E5%8A%A8%E5%8C%96%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://gracesoul.github.io/2019/04/04/python自动化面试题/</id>
    <published>2019-04-04T02:55:33.000Z</published>
    <updated>2019-05-20T03:28:29.956Z</updated>
    
    <content type="html"><![CDATA[<h4 id="常见的python自动化测试的面试题目"><a href="#常见的python自动化测试的面试题目" class="headerlink" title="常见的python自动化测试的面试题目"></a>常见的python自动化测试的面试题目</h4><h4 id="1-对函数传参为可变型数据类型-进行改进"><a href="#1-对函数传参为可变型数据类型-进行改进" class="headerlink" title="1. 对函数传参为可变型数据类型 进行改进"></a>1. 对函数传参为可变型数据类型 进行改进</h4><a id="more"></a><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def <span class="builtin-name">add</span>(ele,mylist=[]):</span><br><span class="line">mylist.append(ele)</span><br><span class="line">return mylist</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(4))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(5))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(6))</span><br></pre></td></tr></table></figure><hr><p>运行结果如下图:<br>    <img src="/2019/04/04/python自动化面试题/test1.png" alt="代码结果图"></p><hr><ol><li><p>解决方法一:(最简单的方法,但是代码有点冗余)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  def <span class="builtin-name">add</span>(ele,mylist=[]):</span><br><span class="line">   mylist.append(ele)</span><br><span class="line">   return mylist</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(4,[]))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(5,[]))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(6,[]))</span><br></pre></td></tr></table></figure></li><li><p>解决方法二:(<strong>推荐使用</strong>)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  def <span class="builtin-name">add</span>(ele,mylist=[]):</span><br><span class="line">   <span class="keyword">if</span> <span class="keyword">not</span> mylist:</span><br><span class="line">   mylist=[]  </span><br><span class="line">   mylist.append(ele)</span><br><span class="line">   return mylist</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(4))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(5))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(6))</span><br></pre></td></tr></table></figure></li><li><p>解决方法三:(将默认参数修改为 不可变的类型)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def <span class="builtin-name">add</span>(ele,<span class="attribute">mylist</span>=None):</span><br><span class="line"> mylist.append(ele)</span><br><span class="line"> return mylist</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(4))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(5))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(6))</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="2-简述方法中-init-与-new-的区别"><a href="#2-简述方法中-init-与-new-的区别" class="headerlink" title="2. 简述方法中__init__() 与__new__()的区别?"></a>2. 简述方法中__init__() 与__new__()的区别?</h4><ol><li><p>方法__new__()的特性<br>1.1 __new__()用于创建实例,在实例创建之前调用,类级别的方法,是个静态方法<br>1.2 __new__()至少有个参数cls,代表当前类,在实例化时由python解释器自动识别<br>1.3 __new__()必须要返回值,返回实例对象</p></li><li><p>方法__init__()的特性<br>2.1 __init__()用于初始化实例,在实例对象创建后被调用,对象级别的方法,用于设置对象的一些初始值<br>2.2 __init__()至少有一个参数self,它是<strong>new</strong>()返回的实例,<strong>init</strong>()是在<strong>new</strong>()的基础上完成数据的初始化操作<br>2.3 __init__()不需要返回值</p></li><li><p>__new__()的作用<br>3.1 __new__() 用来继承一些不可变的class(比如:int,str,tuple)提供一个自定义类的实例化过程的途径</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 子类名(<span class="title">int</span>):</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls,value)</span></span><span class="symbol">:</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">super</span>(子类类名,cls).__new_<span class="number">_</span>(cls,abs(value))</span><br></pre></td></tr></table></figure><p>3.2 __new__()实现单例模式(每次初始化时只返回一个对象)</p> <figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def __new__(<span class="built_in">cls</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> hasattr(<span class="built_in">cls</span>,'instance'):</span><br><span class="line"><span class="built_in">cls</span>.instance = super(子类类名,<span class="built_in">cls</span>).__new__(<span class="built_in">cls</span>)</span><br><span class="line">return <span class="built_in">cls</span>.instance</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;常见的python自动化测试的面试题目&quot;&gt;&lt;a href=&quot;#常见的python自动化测试的面试题目&quot; class=&quot;headerlink&quot; title=&quot;常见的python自动化测试的面试题目&quot;&gt;&lt;/a&gt;常见的python自动化测试的面试题目&lt;/h4&gt;&lt;h4 id=&quot;1-对函数传参为可变型数据类型-进行改进&quot;&gt;&lt;a href=&quot;#1-对函数传参为可变型数据类型-进行改进&quot; class=&quot;headerlink&quot; title=&quot;1. 对函数传参为可变型数据类型 进行改进&quot;&gt;&lt;/a&gt;1. 对函数传参为可变型数据类型 进行改进&lt;/h4&gt;
    
    </summary>
    
      <category term="面试笔试题" scheme="https://gracesoul.github.io/categories/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="python" scheme="https://gracesoul.github.io/tags/python/"/>
    
      <category term="自动化测试" scheme="https://gracesoul.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="面试题" scheme="https://gracesoul.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>更换主题踩得坑</title>
    <link href="https://gracesoul.github.io/2019/04/01/%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98%E8%B8%A9%E5%BE%97%E5%9D%91/"/>
    <id>https://gracesoul.github.io/2019/04/01/更换主题踩得坑/</id>
    <published>2019-04-01T08:17:15.000Z</published>
    <updated>2019-05-20T03:27:48.972Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-使用hexo-github-搭建博客-更换主题-踩到的坑"><a href="#1-使用hexo-github-搭建博客-更换主题-踩到的坑" class="headerlink" title="1. 使用hexo+github 搭建博客 更换主题 踩到的坑"></a>1. 使用hexo+github 搭建博客 更换主题 踩到的坑</h4><ol><li>使用别人的主题 修改theme </li><li>部署发布(hexo clean   —  hexo s) </li><li>登录本地服务器 (localhost:4000)<br>界面出现:<br><img src="/2019/04/01/更换主题踩得坑/error.png" alt="更换主题踩得坑"><a id="more"></a></li></ol><hr><p>解决方案:<br>npm install –save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive<br>(安装 Apollo Github 的依赖包)</p><p>本地就可以正常运行<br>安装后,hexo clean —&gt;hexo s</p><p>部署到github上运行:<br>安装后,hexo clean —&gt;hexo g—&gt;hexo d</p><h4 id="本地样式正常-但是部署到github上-远程访问-样式发生改变-样式乱"><a href="#本地样式正常-但是部署到github上-远程访问-样式发生改变-样式乱" class="headerlink" title="本地样式正常,但是部署到github上 远程访问 样式发生改变(样式乱)"></a>本地样式正常,但是部署到github上 远程访问 样式发生改变(样式乱)</h4><p>原因:<br>   修改根目录下的配置文件: _config.yml  将url进行修改 root 不需要修改<br>   由于参考过网上: 将root由/—&gt;改为/你的项目名  但是经过测试,没有起到作用,可能因人而异吧<br>   配置修改如下图:<br>   <img src="/2019/04/01/更换主题踩得坑/result.png" alt="url配置图"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-使用hexo-github-搭建博客-更换主题-踩到的坑&quot;&gt;&lt;a href=&quot;#1-使用hexo-github-搭建博客-更换主题-踩到的坑&quot; class=&quot;headerlink&quot; title=&quot;1. 使用hexo+github 搭建博客 更换主题 踩到的坑&quot;&gt;&lt;/a&gt;1. 使用hexo+github 搭建博客 更换主题 踩到的坑&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;使用别人的主题 修改theme &lt;/li&gt;
&lt;li&gt;部署发布(hexo clean   —  hexo s) &lt;/li&gt;
&lt;li&gt;登录本地服务器 (localhost:4000)&lt;br&gt;界面出现:&lt;br&gt;&lt;img src=&quot;/2019/04/01/更换主题踩得坑/error.png&quot; alt=&quot;更换主题踩得坑&quot;&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="更换主题" scheme="https://gracesoul.github.io/categories/%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/"/>
    
    
      <category term="hexo" scheme="https://gracesoul.github.io/tags/hexo/"/>
    
      <category term="github" scheme="https://gracesoul.github.io/tags/github/"/>
    
      <category term="主题" scheme="https://gracesoul.github.io/tags/%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
</feed>
