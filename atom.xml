<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>筱茗辰</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/blog/"/>
  <updated>2019-04-04T08:29:45.028Z</updated>
  <id>http://yoursite.com/blog/</id>
  
  <author>
    <name>Grace Soul</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python自动化测试面试题</title>
    <link href="http://yoursite.com/blog/2019/04/04/python%E8%87%AA%E5%8A%A8%E5%8C%96%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/blog/2019/04/04/python自动化面试题/</id>
    <published>2019-04-04T02:55:33.000Z</published>
    <updated>2019-04-04T08:29:45.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见的python自动化测试的面试题目"><a href="#常见的python自动化测试的面试题目" class="headerlink" title="常见的python自动化测试的面试题目"></a>常见的python自动化测试的面试题目</h1><h3 id="1-对函数传参为可变型数据类型-进行改进"><a href="#1-对函数传参为可变型数据类型-进行改进" class="headerlink" title="1. 对函数传参为可变型数据类型 进行改进"></a>1. 对函数传参为可变型数据类型 进行改进</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def add(ele,mylist=[]):</span><br><span class="line">mylist.append(ele)</span><br><span class="line">return mylist</span><br><span class="line"></span><br><span class="line">print(add(4))</span><br><span class="line">print(add(5))</span><br><span class="line">print(add(6))</span><br></pre></td></tr></table></figure><pre><code>运行结果如下图:![结果图](python自动化面试题/test1.png)</code></pre><hr><ol><li><p>解决方法一:(最简单的方法,但是代码有点冗余)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  def add(ele,mylist=[]):</span><br><span class="line">   mylist.append(ele)</span><br><span class="line">   return mylist</span><br><span class="line"></span><br><span class="line">print(add(4,[]))</span><br><span class="line">print(add(5,[]))</span><br><span class="line">print(add(6,[]))</span><br></pre></td></tr></table></figure></li><li><p>解决方法二:(<strong>推荐使用</strong>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  def add(ele,mylist=[]):</span><br><span class="line">   if not mylist:</span><br><span class="line">   mylist=[]  </span><br><span class="line">   mylist.append(ele)</span><br><span class="line">   return mylist</span><br><span class="line"></span><br><span class="line">print(add(4))</span><br><span class="line">print(add(5))</span><br><span class="line">print(add(6))</span><br></pre></td></tr></table></figure></li><li><p>解决方法三:(将默认参数修改为 不可变的类型)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def add(ele,mylist=None):</span><br><span class="line"> mylist.append(ele)</span><br><span class="line"> return mylist</span><br><span class="line"></span><br><span class="line">print(add(4))</span><br><span class="line">print(add(5))</span><br><span class="line">print(add(6))</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="2-简述方法中-init-与-new-的区别"><a href="#2-简述方法中-init-与-new-的区别" class="headerlink" title="2. 简述方法中__init__() 与__new__()的区别?"></a>2. 简述方法中__init__() 与__new__()的区别?</h3><ol><li><p>方法__new__()的特性<br>1.1 __new__()用于创建实例,在实例创建之前调用,类级别的方法,是个静态方法<br>1.2 __new__()至少有个参数cls,代表当前类,在实例化时由python解释器自动识别<br>1.3 __new__()必须要返回值,返回实例对象</p></li><li><p>方法__init__()的特性<br>2.1 __init__()用于初始化实例,在实例对象创建后被调用,对象级别的方法,用于设置对象的一些初始值<br>2.2 __init__()至少有一个参数self,它是<strong>new</strong>()返回的实例,<strong>init</strong>()是在<strong>new</strong>()的基础上完成数据的初始化操作<br>2.3 __init__()不需要返回值</p></li><li><p>__new__()的作用<br>3.1 __new__() 用来继承一些不可变的class(比如:int,str,tuple)提供一个自定义类的实例化过程的途径</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class 子类名(int):</span><br><span class="line"> def __new__(cls,value):</span><br><span class="line">  return super(子类类名,cls).__new__(cls,abs(value))</span><br></pre></td></tr></table></figure><p>3.2 __new__()实现单例模式(每次初始化时只返回一个对象)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def __new__(cls):</span><br><span class="line">if not hasattr(cls,&apos;instance&apos;):</span><br><span class="line">cls.instance = super(子类类名,cls).__new__(cls)</span><br><span class="line">return cls.instance</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常见的python自动化测试的面试题目&quot;&gt;&lt;a href=&quot;#常见的python自动化测试的面试题目&quot; class=&quot;headerlink&quot; title=&quot;常见的python自动化测试的面试题目&quot;&gt;&lt;/a&gt;常见的python自动化测试的面试题目&lt;/h1&gt;&lt;h3 i
      
    
    </summary>
    
      <category term="面试测试题" scheme="http://yoursite.com/blog/categories/%E9%9D%A2%E8%AF%95%E6%B5%8B%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="python" scheme="http://yoursite.com/blog/tags/python/"/>
    
      <category term="自动化" scheme="http://yoursite.com/blog/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="测试" scheme="http://yoursite.com/blog/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="面试题" scheme="http://yoursite.com/blog/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>更换主题踩得坑</title>
    <link href="http://yoursite.com/blog/2019/04/01/%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98%E8%B8%A9%E5%BE%97%E5%9D%91/"/>
    <id>http://yoursite.com/blog/2019/04/01/更换主题踩得坑/</id>
    <published>2019-04-01T08:17:15.000Z</published>
    <updated>2019-04-04T02:12:33.820Z</updated>
    
    <content type="html"><![CDATA[<p>使用hexo+github 搭建博客 更换主题 踩到的坑</p><ol><li>使用别人的主题 修改theme </li><li>部署发布(hexo clean   —  hexo s) </li><li>登录本地服务器 (localhost:4000)<br>界面出现:<br><img src="/blog/2019/04/01/更换主题踩得坑/error.png" alt="更换主题踩得坑"></li></ol><hr><p>解决方案:<br>npm install –save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive<br>(安装 Apollo Github 的依赖包)</p><p>安装后,hexo clean —&gt;hexo c —&gt;hexo s<br>本地就可以正常运行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用hexo+github 搭建博客 更换主题 踩到的坑&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用别人的主题 修改theme &lt;/li&gt;
&lt;li&gt;部署发布(hexo clean   —  hexo s) &lt;/li&gt;
&lt;li&gt;登录本地服务器 (localhost:4000)&lt;br&gt;界面
      
    
    </summary>
    
      <category term="更换主题" scheme="http://yoursite.com/blog/categories/%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/blog/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/blog/tags/github/"/>
    
      <category term="主题" scheme="http://yoursite.com/blog/tags/%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>初始hexo</title>
    <link href="http://yoursite.com/blog/2019/03/28/%E4%BD%A0%E5%A5%BD-Hexo/"/>
    <id>http://yoursite.com/blog/2019/03/28/你好-Hexo/</id>
    <published>2019-03-28T03:09:18.000Z</published>
    <updated>2019-04-04T02:02:37.828Z</updated>
    
    <content type="html"><![CDATA[<p>初次使用Hexo,是一件非常不多的事!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;初次使用Hexo,是一件非常不多的事!&lt;/p&gt;

      
    
    </summary>
    
      <category term="搭建博客" scheme="http://yoursite.com/blog/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/blog/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/blog/tags/github/"/>
    
      <category term="nmp" scheme="http://yoursite.com/blog/tags/nmp/"/>
    
      <category term="基础" scheme="http://yoursite.com/blog/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/blog/2019/03/28/hello-world/"/>
    <id>http://yoursite.com/blog/2019/03/28/hello-world/</id>
    <published>2019-03-28T02:03:00.707Z</published>
    <updated>2019-03-28T02:03:00.707Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
