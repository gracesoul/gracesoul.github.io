<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>筱茗辰</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gracesoul.github.io/"/>
  <updated>2019-05-17T03:24:20.386Z</updated>
  <id>https://gracesoul.github.io/</id>
  
  <author>
    <name>Grace Soul</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python自动化面试编程题（一）</title>
    <link href="https://gracesoul.github.io/2019/05/16/python%E8%87%AA%E5%8A%A8%E5%8C%96%E9%9D%A2%E8%AF%95%E7%BC%96%E7%A8%8B%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://gracesoul.github.io/2019/05/16/python自动化面试编程题（一）/</id>
    <published>2019-05-16T07:30:44.000Z</published>
    <updated>2019-05-17T03:24:20.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python自动化测试面试—编程题"><a href="#python自动化测试面试—编程题" class="headerlink" title="python自动化测试面试—编程题"></a>python自动化测试面试—编程题</h2><ol><li>搜索引擎中会对用户输入的数据进行处理，第一步就是词法分析，分离字符串中的数字、中文、拼音、符号。比如这个字符串：我的是名字是ths,今年18岁<br>语法分析后得到结果如下： 请编写程序实现该词法分析功能。<br>数字：18<br>中文：我的名字是 今年 岁<br>拼音：ths<br>符号：，。</li></ol><hr><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">方法一：使用<span class="built_in">string</span> 模块</span><br><span class="line">import <span class="built_in">string</span></span><br><span class="line"><span class="keyword">number</span>=[]</span><br><span class="line">chinese = []</span><br><span class="line">english=[]</span><br><span class="line">symbol=[]</span><br><span class="line">def find_data(s):</span><br><span class="line"><span class="keyword">for</span> i in <span class="variable">s:</span></span><br><span class="line">    <span class="keyword">if</span> i in <span class="built_in">string</span>.digit<span class="variable">s:</span></span><br><span class="line">        <span class="keyword">number</span>.<span class="keyword">append</span>(i)</span><br><span class="line">    elif i in <span class="built_in">string</span>.ascii_letter<span class="variable">s:</span></span><br><span class="line">        english.<span class="keyword">append</span>(i)</span><br><span class="line">    elif i in <span class="built_in">string</span>.punctuation:</span><br><span class="line">        symbol.<span class="keyword">append</span>(i)</span><br><span class="line">    elif i in <span class="built_in">string</span>.whitespace:</span><br><span class="line">        symbol.<span class="keyword">append</span>(i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        chinese.<span class="keyword">append</span>(i)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'数字是：&#123;&#125;'</span>.format(<span class="string">''</span>.<span class="keyword">join</span>(<span class="keyword">number</span>)))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'中文是：&#123;&#125;'</span>.format(<span class="string">''</span>.<span class="keyword">join</span>(chinese)))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'字母是：&#123;&#125;'</span>.format(<span class="string">''</span>.<span class="keyword">join</span>(english)))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'符号是：&#123;&#125;'</span>.format(<span class="string">''</span>.<span class="keyword">join</span>(symbol)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">in_data = <span class="built_in">input</span>(<span class="string">'请输入你要解析的字符串：'</span>)</span><br><span class="line">find_data(in_data)</span><br></pre></td></tr></table></figure><hr><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">方法二：使用正则方法</span><br><span class="line">import re</span><br><span class="line">def find_data_re(s):</span><br><span class="line">patter = &#123;<span class="string">"数字"</span>:<span class="string">"\d"</span>,<span class="string">"字母"</span>:<span class="string">"[a-zA-Z]"</span>,<span class="string">"汉字"</span>:<span class="string">"[\u4e00-\u9fff]"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> patter.items():</span><br><span class="line">    # <span class="built_in">print</span>(<span class="string">'键的内容：&#123;&#125;'</span>.<span class="built_in">format</span>(k))</span><br><span class="line">    # <span class="built_in">print</span> (<span class="string">'值的内容：&#123;&#125;'</span>.<span class="built_in">format</span> (v))</span><br><span class="line">    # 取字典中的value值</span><br><span class="line">    result = re.findall(v,s)</span><br><span class="line">    <span class="built_in">print</span>(k+<span class="string">':'</span>+<span class="string">''</span>.join(result))</span><br><span class="line">    s = re.<span class="built_in">sub</span>(v,<span class="string">''</span>,s)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'符号：&#123;&#125;'</span>.<span class="built_in">format</span>(s))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">in_data = <span class="built_in">input</span>(<span class="string">'请输入你要解析的字符串：'</span>)</span><br><span class="line">find_data_re(in_data)</span><br></pre></td></tr></table></figure><ol start="2"><li>编写程序实现:根据输入的数字打印菱形</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="number">5</span>，输出：</span><br><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br><span class="line">n=<span class="number">6</span>，输出：</span><br><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br><span class="line">n为任意大于<span class="number">1</span>的正整数</span><br><span class="line"></span><br><span class="line"><span class="comment"># 理解题意</span></span><br><span class="line"><span class="comment"># 1.行数=输入的数 n=5-&gt;有5行</span></span><br><span class="line"><span class="comment"># 2.*的个数 2n-1 n=1 第一行 2*1-1=1 第一行一个*</span></span><br><span class="line"><span class="comment"># 3.星号+空格=输入的数字n</span></span><br><span class="line"><span class="comment"># 4.前面的空格数 = 后面的空格数 = （n-星号数）/2 = 单边空格个数 (n=输入的数)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_star</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="comment"># 前半部分</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">2</span>):  <span class="comment"># 步调为 2  第一行1 第二行3</span></span><br><span class="line">        star_num = <span class="string">' '</span>*((n-i)//<span class="number">2</span>)+<span class="string">'*'</span>*i         <span class="comment"># ' '*((n-i)//2) 前面的空格数目</span></span><br><span class="line">        print(star_num)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n%<span class="number">2</span> == <span class="number">0</span>:   <span class="comment"># n为偶数</span></span><br><span class="line">        s = n<span class="number">-1</span>    <span class="comment"># n=6 那么下部分第一行只打印5个，所以打印 n-1</span></span><br><span class="line">    <span class="keyword">else</span>:          <span class="comment"># n 为奇数</span></span><br><span class="line">        s = n<span class="number">-2</span>    <span class="comment"># 比如n=5,那么下半部份，第一行只打印3个 所以打印n-2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 后半部分</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(s,<span class="number">0</span>,<span class="number">-2</span>):</span><br><span class="line">        star_num = <span class="string">' '</span> * ((n - i) // <span class="number">2</span>) + <span class="string">'*'</span> * i</span><br><span class="line">        print(star_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print_star(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>传入一个Json串，返回一个字典，字典只取出Json最底层的数据，中间如果有字符串也要进行处理，<br>请以下面的数据为例，请用递归方法实现<br>Json：{“a”:”aa”,”b”:[‘{“c”:”cc”,”d”:”dd”}’,{“f”:{“e”:”ee”}}]}<br>输出：<br>Dic:{‘a’:’aa’,’c’:’cc’,’d’:’dd’,’e’:’ee’}</li></ol><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">def</span> str_to_dict(<span class="type">S</span>):   # <span class="type">S</span> 是一个json字符串</span><br><span class="line">    dict_result=&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="class"><span class="keyword">type</span>(<span class="type">S</span>)== str: # <span class="type">S</span> 是字符串 直接处理字符串</span></span><br><span class="line">        <span class="type">S</span> = eval(<span class="type">S</span>)   # （字符串转为字典 不传给dict_result(因为字典里面还有其他的数据类型)）</span><br><span class="line">        print('eval()后的<span class="type">S</span>的值：&#123;&#125;,类型是：&#123;&#125;'.format(<span class="type">S</span>,<span class="class"><span class="keyword">type</span>(<span class="type">S</span>)))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="class"><span class="keyword">type</span> (<span class="type">S</span>) == list:  # 判断是否是列表，遍历列表里面的内容</span></span><br><span class="line">        for i <span class="keyword">in</span> <span class="type">S</span>:</span><br><span class="line">            d = str_to_dict(i)</span><br><span class="line">            dict_result.update(d)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="class"><span class="keyword">type</span>(<span class="type">S</span>)==dict:   # 判断是否是字典</span></span><br><span class="line">        for k,v <span class="keyword">in</span> <span class="type">S</span>.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="class"><span class="keyword">type</span>(<span class="title">v</span>)==list or <span class="keyword">type</span>(<span class="title">v</span>)==dict:  # 字典里面镶嵌着列表或者字典</span></span><br><span class="line">                d= str_to_dict(v)               # （字典里面有列表和字典里面有字典）</span><br><span class="line">                dict_result.update(d)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dict_result[k]=v      # 单纯是字典，就直接存在dict_result字典中</span><br><span class="line">    return dict_result  # 返回底层字典</span><br><span class="line"> <span class="keyword">if</span> __name__ == '__main__':</span><br><span class="line">    <span class="type">J</span>='&#123;<span class="string">"a"</span>:<span class="string">"aa"</span>,<span class="string">"b"</span>:[\'&#123;<span class="string">"c"</span>:<span class="string">"cc"</span>,<span class="string">"d"</span>:<span class="string">"dd"</span>&#125;\',&#123;<span class="string">"f"</span>:&#123;<span class="string">"e"</span>:<span class="string">"ee"</span>&#125;&#125;]&#125;'</span><br><span class="line">    dict = str_to_dict(<span class="type">J</span>)</span><br><span class="line">    print(dict)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python自动化测试面试—编程题&quot;&gt;&lt;a href=&quot;#python自动化测试面试—编程题&quot; class=&quot;headerlink&quot; title=&quot;python自动化测试面试—编程题&quot;&gt;&lt;/a&gt;python自动化测试面试—编程题&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;搜索引擎
      
    
    </summary>
    
      <category term="自动化面试编程题" scheme="https://gracesoul.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%9D%A2%E8%AF%95%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
    
    
      <category term="自动化测试" scheme="https://gracesoul.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="编程题" scheme="https://gracesoul.github.io/tags/%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>jenkins部署python项目踩得坑</title>
    <link href="https://gracesoul.github.io/2019/05/10/jenkins%E9%83%A8%E7%BD%B2python%E9%A1%B9%E7%9B%AE%E8%B8%A9%E5%BE%97%E5%9D%91/"/>
    <id>https://gracesoul.github.io/2019/05/10/jenkins部署python项目踩得坑/</id>
    <published>2019-05-10T09:15:23.000Z</published>
    <updated>2019-05-10T10:11:46.925Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jenkins部署python项目踩的坑"><a href="#jenkins部署python项目踩的坑" class="headerlink" title="jenkins部署python项目踩的坑"></a>jenkins部署python项目踩的坑</h2><h5 id="项目：webservice项目部署到jenkins中，需要安装python项目中所需要的依赖环境"><a href="#项目：webservice项目部署到jenkins中，需要安装python项目中所需要的依赖环境" class="headerlink" title="项目：webservice项目部署到jenkins中，需要安装python项目中所需要的依赖环境"></a>项目：webservice项目部署到jenkins中，需要安装python项目中所需要的依赖环境</h5><p>在项目中 生成所有需要依赖的库</p><ol><li>pip freeze &gt; requirements.txt<br>在新的环境中 ，将所有的依赖包全部下载下来</li><li>pip install -r requirements.txt<h5 id="问题：pip不是内部或外部命令，也不是可运行的程序或批处理文件"><a href="#问题：pip不是内部或外部命令，也不是可运行的程序或批处理文件" class="headerlink" title="问题：pip不是内部或外部命令，也不是可运行的程序或批处理文件"></a>问题：pip不是内部或外部命令，也不是可运行的程序或批处理文件</h5> <img src="jenkins部署python项目踩得坑/error.png" alt="错误界面"></li></ol><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol><li>jenkins配置<br><img src="jenkins部署python项目踩得坑/sep1.png" alt="配置界面"></li><li>修改配置方式<br><img src="jenkins部署python项目踩得坑/sep2.png" alt="配置界面"></li><li>保存后，点击立即构建 出现上述问题</li><li>检查pip或python是否配置环境变量<br><img src="jenkins部署python项目踩得坑/sep3.png" alt="配置界面"></li><li>排除pip或者python未配置环境变量的问题，依旧无法解决上述问题</li></ol><h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><ol><li>win+r 进入终端窗口</li><li>进入该项目从github上pull下来的代码的路径</li><li>输入命令：pip install -r requirements.txt<br><img src="jenkins部署python项目踩得坑/sep4.png" alt="配置界面"></li><li>输入命令：python run.py<br><img src="jenkins部署python项目踩得坑/sep5.png" alt="配置界面"></li><li>发现终端运行是成功的，但是一样的路径，jenkins 构建 输入Windows批处理命令，运行出错，报pip出错</li><li>一直很奇怪这个问题，百度好久都没有找到解决方案</li><li>再次去查看 依赖包安装成功后的路径 发现suds模块安装到其他目录去了，没有按照到python目录下<br><img src="jenkins部署python项目踩得坑/sep6.png" alt="配置界面"></li><li>将生产suds模块的文件夹找到，然后删除</li><li>重新安装 pip install -r requirements.txt</li><li>重新运行 jenkins运行成功</li><li>pip不是内部或外部命令，也不是可运行的程序或批处理文件 该问题完美解决（主要是第一次安装环境的时候，安装目录出错了）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;jenkins部署python项目踩的坑&quot;&gt;&lt;a href=&quot;#jenkins部署python项目踩的坑&quot; class=&quot;headerlink&quot; title=&quot;jenkins部署python项目踩的坑&quot;&gt;&lt;/a&gt;jenkins部署python项目踩的坑&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="jenkins部署项目" scheme="https://gracesoul.github.io/categories/jenkins%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="jenkins构建" scheme="https://gracesoul.github.io/tags/jenkins%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>重要网址记录大全</title>
    <link href="https://gracesoul.github.io/2019/04/26/%E9%87%8D%E8%A6%81%E7%BD%91%E5%9D%80%E8%AE%B0%E5%BD%95%E5%A4%A7%E5%85%A8/"/>
    <id>https://gracesoul.github.io/2019/04/26/重要网址记录大全/</id>
    <published>2019-04-26T08:27:14.000Z</published>
    <updated>2019-05-05T05:40:23.012Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://jenkins.io/download/" target="_blank" rel="noopener">jenkins官网</a><br>jenkins：<a href="https://jenkins.io/download/" target="_blank" rel="noopener">https://jenkins.io/download/</a><br>外文网（世界级）：<a href="https://www.edx.org" target="_blank" rel="noopener">https://www.edx.org</a><br>慕课网：<a href="http://www.imooc.com/course/list" target="_blank" rel="noopener">http://www.imooc.com/course/list</a><br>w3school（在线编程基础知识）：<a href="http://www.w3cschool.cn/tutorial" target="_blank" rel="noopener">http://www.w3cschool.cn/tutorial</a><br>慕课学院：<a href="http://mooc.guokr.com/course/?dept_id=52&amp;order=hot" target="_blank" rel="noopener">http://mooc.guokr.com/course/?dept_id=52&amp;order=hot</a><br>学堂在线：<a href="http://www.xuetangx.com/" target="_blank" rel="noopener">http://www.xuetangx.com/</a><br>LeetCode Online Judge(英文网，在线编程答疑)：<a href="https://leetcode.com/" target="_blank" rel="noopener">https://leetcode.com/</a><br>mooc中国：<a href="http://www.mooc.cn/" target="_blank" rel="noopener">http://www.mooc.cn/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://jenkins.io/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jenkins官网&lt;/a&gt;&lt;br&gt;jenkins：&lt;a href=&quot;https://jenkins.io/download/&quot; tar
      
    
    </summary>
    
      <category term="网址记录" scheme="https://gracesoul.github.io/categories/%E7%BD%91%E5%9D%80%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="闲谈" scheme="https://gracesoul.github.io/tags/%E9%97%B2%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>jenkins安装</title>
    <link href="https://gracesoul.github.io/2019/04/24/jenkins%E5%AE%89%E8%A3%85/"/>
    <id>https://gracesoul.github.io/2019/04/24/jenkins安装/</id>
    <published>2019-04-24T02:18:14.000Z</published>
    <updated>2019-04-24T02:18:14.488Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python自动化面试一</title>
    <link href="https://gracesoul.github.io/2019/04/22/python%E8%87%AA%E5%8A%A8%E5%8C%96%E9%9D%A2%E8%AF%95%E4%B8%80/"/>
    <id>https://gracesoul.github.io/2019/04/22/python自动化面试一/</id>
    <published>2019-04-22T02:30:35.000Z</published>
    <updated>2019-05-17T03:30:20.205Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见的python自动化测试的面试题目"><a href="#常见的python自动化测试的面试题目" class="headerlink" title="常见的python自动化测试的面试题目"></a>常见的python自动化测试的面试题目</h1><h3 id="1-给定一个只包含正整数的非空数组-返回该数组中重复次数最多的前N个数字-返回的结果按重复次数从多到少降序排列-N不存在取值非法的情况"><a href="#1-给定一个只包含正整数的非空数组-返回该数组中重复次数最多的前N个数字-返回的结果按重复次数从多到少降序排列-N不存在取值非法的情况" class="headerlink" title="1. 给定一个只包含正整数的非空数组,返回该数组中重复次数最多的前N个数字,返回的结果按重复次数从多到少降序排列(N不存在取值非法的情况)"></a>1. 给定一个只包含正整数的非空数组,返回该数组中重复次数最多的前N个数字,返回的结果按重复次数从多到少降序排列(N不存在取值非法的情况)</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">方法一：</span><br><span class="line">def ele_sort(data,n):</span><br><span class="line">    d=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        d[i]=data.count(i) <span class="comment">#将元素出现的次数 作为字典键值对的value值，组成（i:d[i]==&gt;元素：元素出现的次数）</span></span><br><span class="line">    <span class="built_in">print</span><span class="function"><span class="params">(d.items())</span>  #<span class="title">type</span><span class="params">(d.items())</span>--&gt;</span>&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict_items</span>'&gt;</span></span><br><span class="line"></span><br><span class="line">    sort_data = sorted(d.items(),key=lambda item:item[<span class="number">1</span>],reverse=True)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,n):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'排名第&#123;&#125;的元素：&#123;&#125;，出现了&#123;&#125;次'</span>.format(i+<span class="number">1</span>,sort_data[i][<span class="number">0</span>],sort_data[i][<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    l = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line">    n = int(input(<span class="string">'请输入小于元素个数的正整数：'</span>))</span><br><span class="line">    ele_sort(l,n)</span><br></pre></td></tr></table></figure><p>方法二：（使用set集合操作）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def data_sort(data,n):</span><br><span class="line">    data_new = <span class="keyword">set</span>(<span class="keyword">data</span>) <span class="comment">#将重复的数据去掉</span></span><br><span class="line">    d=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data_new:</span><br><span class="line">        d[i]=data.count(i)</span><br><span class="line">    print(d.items())</span><br><span class="line"></span><br><span class="line">    list_data = sorted(d.items(),<span class="keyword">key</span>=lambda item:item[<span class="number">1</span>],<span class="keyword">reverse</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(<span class="number">0</span>,n):</span><br><span class="line">        print(<span class="string">'排名第&#123;&#125;的元素：&#123;&#125;，出现&#123;&#125;次'</span>.format(i+<span class="number">1</span>,list_data[i][<span class="number">0</span>],list_data[i][<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    l = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line">    n=<span class="built_in">int</span>(<span class="keyword">input</span>(<span class="string">'请输入小于元素个数&#123;&#125;的正整数：'</span>.format(<span class="keyword">len</span>(<span class="keyword">set</span>(l)))))</span><br><span class="line">    data_sort(l,n)</span><br></pre></td></tr></table></figure><p>代码难点解读:<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d.items()：</span><br><span class="line">   <span class="number">1</span>. 它的数据类型是：dict_items 以列表返回可遍历的(键, 值) 元组数组  </span><br><span class="line">   <span class="number">2</span>. 注意：返回不是列表：是一个存放多个元祖的高仿列表，[<span class="built_in">(key</span>,<span class="keyword">value</span>),<span class="built_in">(key</span>,<span class="keyword">value</span>),<span class="built_in">(key</span>,<span class="keyword">value</span>)...]</span><br><span class="line">   <span class="number">3</span>. 不能用下标，可用<span class="keyword">for</span>循环</span><br><span class="line">sorted(d.items()<span class="built_in">,key</span>=lambda item:item[<span class="number">1</span>]<span class="built_in">,reverse</span>=True)   </span><br><span class="line">   <span class="number">1</span>. sorted(iterable<span class="built_in">,key</span><span class="built_in">,reverse</span>)函数,参<span class="built_in">数key</span>来决定我们根据那个字段对列表元素进行排序,</span><br><span class="line">   <span class="number">2</span>. sorted(iterable<span class="built_in">，key</span><span class="built_in">，reverse</span>)函数返回一个新列表，其中包含按升序排列的iterable中的所有项</span><br><span class="line">   <span class="number">3</span>.<span class="built_in"> key</span>=lambda 元素: 元素[字段索引]</span><br><span class="line">   <span class="number">4</span>. lambda item:item[<span class="number">1</span>] 表示对元素第二个字段(就是 <span class="keyword">value</span>)进行排序</span><br></pre></td></tr></table></figure></p><h3 id="2-从字符串‘abcdba‘中找出第一个不重复的字符，方法不限"><a href="#2-从字符串‘abcdba‘中找出第一个不重复的字符，方法不限" class="headerlink" title="2. 从字符串‘abcdba‘中找出第一个不重复的字符，方法不限"></a>2. 从字符串‘abcdba‘中找出第一个不重复的字符，方法不限</h3><p>方法一： 使用count()函数 （查看元素在数据中出现的次数）<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def find_ele(<span class="keyword">data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">data</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">data</span>.count(i)==<span class="number">1</span>: #元素在数据<span class="keyword">data</span>出现的次数</span><br><span class="line">            print(<span class="string">'第一个不重复的字符是：&#123;&#125;'</span>.format(i))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s= input(<span class="string">'请输入随意的字符串：'</span>)</span><br><span class="line">    find_ele(s)</span><br></pre></td></tr></table></figure></p><p>方法二： 使用split()切割函数(切割后 长度为2 说明该元素只存在一个)<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def find_ele(<span class="keyword">data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">data</span>:</span><br><span class="line">        <span class="keyword">if</span> len (<span class="keyword">data</span>.split (i)) == <span class="number">2</span>:</span><br><span class="line">            # <span class="keyword">data</span>=<span class="string">'abcdba'</span> <span class="keyword">data</span>.split(a)===&gt;[<span class="string">''</span>,<span class="string">'bcdb'</span>,<span class="string">''</span>], <span class="keyword">data</span>.split(b)===&gt;[<span class="string">'a'</span>,<span class="string">'cd'</span>,<span class="string">'a'</span>]</span><br><span class="line">            print (<span class="string">'第一个不重复的字符是：&#123;&#125;'</span>.format (i))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = input (<span class="string">'请输入随意的字符串：'</span>)</span><br><span class="line">    find_ele (s)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常见的python自动化测试的面试题目&quot;&gt;&lt;a href=&quot;#常见的python自动化测试的面试题目&quot; class=&quot;headerlink&quot; title=&quot;常见的python自动化测试的面试题目&quot;&gt;&lt;/a&gt;常见的python自动化测试的面试题目&lt;/h1&gt;&lt;h3 i
      
    
    </summary>
    
      <category term="面试笔试题" scheme="https://gracesoul.github.io/categories/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="python" scheme="https://gracesoul.github.io/tags/python/"/>
    
      <category term="自动化测试" scheme="https://gracesoul.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="面试题" scheme="https://gracesoul.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>自动化测试之接口测试</title>
    <link href="https://gracesoul.github.io/2019/04/16/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    <id>https://gracesoul.github.io/2019/04/16/自动化测试之接口测试/</id>
    <published>2019-04-16T08:33:56.000Z</published>
    <updated>2019-04-23T03:10:56.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python自动化测试之接口测试"><a href="#python自动化测试之接口测试" class="headerlink" title="python自动化测试之接口测试"></a>python自动化测试之接口测试</h1><h2 id="1-项目框架的分层图"><a href="#1-项目框架的分层图" class="headerlink" title="1. 项目框架的分层图:"></a>1. 项目框架的分层图:</h2><p>   <img src="自动化测试之接口测试/level.png" alt="项目层次图"></p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><h3 id="2-1-common文件夹"><a href="#2-1-common文件夹" class="headerlink" title="2.1 common文件夹"></a>2.1 common文件夹</h3><h4 id="2-1-1-do-request-py-发起http请求"><a href="#2-1-1-do-request-py-发起http请求" class="headerlink" title="2.1.1 do_request.py (发起http请求)"></a>2.1.1 do_request.py (发起http请求)</h4><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"><span class="keyword">from</span> interface_test.common.config import ReadConfig</span><br><span class="line">config = ReadConfig()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> HttpRequest:</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    公共使用一个session, cookies自动传递</span></span><br><span class="line"><span class="string">    这是一个操作http请求的类,使用这类的request方法去完成不同的HTTP请求，并且返回响应结果</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    def __init__(<span class="keyword">self</span>):</span><br><span class="line">        #保证同一个session对象,便于cookies的自动传值</span><br><span class="line">        <span class="keyword">self</span>.session = requests.session()</span><br><span class="line"></span><br><span class="line">    def http_request(<span class="keyword">self</span>,<span class="function"><span class="keyword">method</span>,<span class="title">url</span>,<span class="title">data</span>=<span class="title">None</span>,<span class="title">json</span>=<span class="title">None</span>):</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        :param method: 请求的方法</span></span><br><span class="line"><span class="string">        :param url: 请求的路径</span></span><br><span class="line"><span class="string">        :param data: 请求的数据</span></span><br><span class="line"><span class="string">        :param json: json类型的数据</span></span><br><span class="line"><span class="string">        :return: 返回请求响应的文本</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="function"><span class="keyword">method</span> = <span class="title">method</span>.<span class="title">lower</span><span class="params">()</span> #强制转化为小写  方便后期操作（大写也可以）</span></span><br><span class="line"><span class="function">        <span class="title">if</span> <span class="title">type</span><span class="params">(data)</span>==<span class="title">str</span>:</span>   # 将字符串转化为 字典形式的数据</span><br><span class="line">            data = eval(data)</span><br><span class="line"></span><br><span class="line">        # 路径的拼接，根据线上环境或测试环境 进行路径的拼接</span><br><span class="line">        url = config.get_strvalue(<span class="string">'api'</span>,<span class="string">'pre_url'</span>)+url</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'data的数据&#123;&#125;：'</span>.format(data))</span><br><span class="line">        print(<span class="string">'url的路径：'</span>,url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="function"><span class="keyword">method</span> == '<span class="title">get</span>':</span></span><br><span class="line">            resp = <span class="keyword">self</span>.session.request(<span class="function"><span class="keyword">method</span>=<span class="title">method</span>,<span class="title">url</span>=<span class="title">url</span>,<span class="title">params</span>=<span class="title">data</span>)</span></span><br><span class="line"><span class="function">        <span class="title">elif</span> <span class="title">method</span> == '<span class="title">post</span>':</span></span><br><span class="line">            <span class="keyword">if</span> json:</span><br><span class="line">                resp = <span class="keyword">self</span>.session.request(<span class="function"><span class="keyword">method</span>=<span class="title">method</span>,<span class="title">url</span>=<span class="title">url</span>,<span class="title">json</span>=<span class="title">json</span>)</span></span><br><span class="line"><span class="function">            <span class="title">else</span>:</span></span><br><span class="line">                resp = <span class="keyword">self</span>.session.request(<span class="function"><span class="keyword">method</span>=<span class="title">method</span>,<span class="title">url</span>=<span class="title">url</span>,<span class="title">data</span>=<span class="title">data</span>)</span></span><br><span class="line"><span class="function">        <span class="title">else</span>:</span></span><br><span class="line">            print(<span class="string">'暂不支持其他的请求方式!'</span>)</span><br><span class="line">        print (<span class="string">'响应码:'</span>, resp.status_code)</span><br><span class="line">        print (<span class="string">'响应文本:'</span>, resp.text)</span><br><span class="line">        print (<span class="string">'响应的cookie:'</span>, resp.cookies)</span><br><span class="line">        return resp</span><br><span class="line"></span><br><span class="line">    def close(<span class="keyword">self</span>):</span><br><span class="line">        <span class="keyword">self</span>.session.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    # 注册接口</span><br><span class="line">    register_url = <span class="string">'http://test.lemonban.com/futureloan/mvc/api/member/register'</span></span><br><span class="line">    <span class="keyword">params</span> = <span class="comment">&#123;'mobilephone': '18871362019', 'pwd': '123456', 'regname': "test"&#125;</span></span><br><span class="line">    resp = HttpRequest().http_request(<span class="string">'post'</span>,url=register_url,data=<span class="keyword">params</span>)</span><br><span class="line">    print(resp.text)</span><br></pre></td></tr></table></figure><h4 id="2-1-2-do-excel-py-操作Excel的读写"><a href="#2-1-2-do-excel-py-操作Excel的读写" class="headerlink" title="2.1.2 do_excel.py (操作Excel的读写)"></a>2.1.2 do_excel.py (操作Excel的读写)</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import load_workbook</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Case</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.case_id =None</span><br><span class="line">        <span class="keyword">self</span>.title = None</span><br><span class="line">        <span class="keyword">self</span>.url=None</span><br><span class="line">        <span class="keyword">self</span>.data = None</span><br><span class="line">        <span class="keyword">self</span>.method = None</span><br><span class="line">        <span class="keyword">self</span>.expected = None</span><br><span class="line">        <span class="keyword">self</span>.actual = None</span><br><span class="line">        <span class="keyword">self</span>.result = None</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoExcel</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,file_name,sheet_name)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.file_name = file_name</span><br><span class="line">        <span class="keyword">self</span>.sheet_name = sheet_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(<span class="keyword">self</span>)</span></span>: <span class="comment">#Excel的读取数据操作</span></span><br><span class="line">        wb = load_workbook(<span class="keyword">self</span>.file_name)</span><br><span class="line">        sheet = wb[<span class="keyword">self</span>.sheet_name]</span><br><span class="line">        <span class="comment"># 使用类与对象的思想进行操作</span></span><br><span class="line">        cases=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,sheet.max_row+<span class="number">1</span>)<span class="symbol">:</span></span><br><span class="line">            row_case=Case()  <span class="comment">#实例化对象</span></span><br><span class="line">            row_case.case_id = sheet.cell(row=i,column=<span class="number">1</span>).value  <span class="comment">#对象调用属性</span></span><br><span class="line">            row_case.title = sheet.cell (row=i, column=<span class="number">2</span>).value</span><br><span class="line">            row_case.url = sheet.cell (row=i, column=<span class="number">3</span>).value</span><br><span class="line">            row_case.data = sheet.cell (row=i, column=<span class="number">4</span>).value</span><br><span class="line">            row_case.method = sheet.cell (row=i, column=<span class="number">5</span>).value</span><br><span class="line">            row_case.expected = sheet.cell (row=i, column=<span class="number">6</span>).value</span><br><span class="line">            cases.append(row_case)</span><br><span class="line">        wb.close ()</span><br><span class="line">        <span class="keyword">return</span> cases</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_back</span><span class="params">(<span class="keyword">self</span>,row,col,value)</span></span>: <span class="comment">#excel的写回操作</span></span><br><span class="line">        wb = load_workbook(<span class="keyword">self</span>.file_name)</span><br><span class="line">        sheet = wb[<span class="keyword">self</span>.sheet_name]</span><br><span class="line">        sheet.cell(row,col).value = value</span><br><span class="line">        wb.save(<span class="keyword">self</span>.file_name)</span><br><span class="line">        wb.close()</span><br></pre></td></tr></table></figure><h4 id="2-1-3-contants-py-文件的路径"><a href="#2-1-3-contants-py-文件的路径" class="headerlink" title="2.1.3 contants.py (文件的路径)"></a>2.1.3 contants.py (文件的路径)</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">os</span></span><br><span class="line"># <span class="built_in">os</span>.<span class="built_in">path</span>.abspath(__file__) 动态获取当前文件的路径</span><br><span class="line"># <span class="built_in">os</span>.<span class="built_in">path</span>.dirname(<span class="built_in">os</span>.<span class="built_in">path</span>.abspath(__file__)) 动态获取当前文件的上一个文件夹的路径</span><br><span class="line">base_dir = <span class="built_in">os</span>.<span class="built_in">path</span>.dirname(<span class="built_in">os</span>.<span class="built_in">path</span>.dirname(<span class="built_in">os</span>.<span class="built_in">path</span>.abspath(__file__))) #路径到了interface_test</span><br><span class="line"># <span class="built_in">print</span>(base_dir)</span><br><span class="line"></span><br><span class="line"># 测试用例 Excel文件</span><br><span class="line">case_file = <span class="built_in">os</span>.<span class="built_in">path</span>.join(base_dir,<span class="string">'data'</span>,<span class="string">'cases.xlsx'</span>)</span><br><span class="line"># <span class="built_in">print</span>(case_file)</span><br><span class="line"></span><br><span class="line"># 有关线上环境与测试环境的网址切换的配置文件</span><br><span class="line">global_config_file = <span class="built_in">os</span>.<span class="built_in">path</span>.join(base_dir,<span class="string">'config'</span>,<span class="string">'global.cfg'</span>)</span><br><span class="line">online_config_file = <span class="built_in">os</span>.<span class="built_in">path</span>.join(base_dir,<span class="string">'config'</span>,<span class="string">'online.cfg'</span>)</span><br><span class="line">test_config_file = <span class="built_in">os</span>.<span class="built_in">path</span>.join(base_dir,<span class="string">'config'</span>,<span class="string">'test.cfg'</span>)</span><br></pre></td></tr></table></figure><h4 id="2-1-4-config-py-配置文件的读取"><a href="#2-1-4-config-py-配置文件的读取" class="headerlink" title="2.1.4 config.py(配置文件的读取)"></a>2.1.4 config.py(配置文件的读取)</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">from configparser import ConfigParser</span><br><span class="line">from interface_test.common.contants import *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadConfig</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,encoding=<span class="string">'utf-8'</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.cf = ConfigParser() <span class="comment">#打开配置文件</span></span><br><span class="line">        <span class="keyword">self</span>.cf.read(global_config_file,encoding) <span class="comment">#先加载global.cfg配置文件</span></span><br><span class="line">        switch = <span class="keyword">self</span>.cf.getboolean(<span class="string">'switch'</span>,<span class="string">'on'</span>)  <span class="comment">#读取global.cfg配置文件的switch的值</span></span><br><span class="line">        <span class="keyword">if</span> <span class="symbol">switch:</span></span><br><span class="line">            <span class="comment"># on=True 开关打开的时候,加载的是线上环境的配置</span></span><br><span class="line">            <span class="keyword">self</span>.cf.read(online_config_file,encoding)</span><br><span class="line">        <span class="symbol">else:</span></span><br><span class="line">            <span class="keyword">self</span>.cf.read(test_config_file,encoding)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_strvalue</span><span class="params">(<span class="keyword">self</span>,section,option)</span></span>: <span class="comment"># 获取字符串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.cf.get(section,option)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_intvalue</span><span class="params">(<span class="keyword">self</span>,section,option)</span></span>: <span class="comment"># 获取整数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.cf.getint(section,option)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_boolvalue</span><span class="params">(<span class="keyword">self</span>,section,option)</span></span>: <span class="comment"># 获取布尔值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.cf.getboolean(section,option)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span><span class="symbol">:</span></span><br><span class="line">    config = ReadConfig()</span><br><span class="line">    value = config.get_boolvalue(<span class="string">'switch'</span>,<span class="string">'on'</span>)</span><br><span class="line">    <span class="comment"># value = config.get_strvalue('api','pre_url')</span></span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure><h4 id="2-1-5-do-mysql-操作数据库"><a href="#2-1-5-do-mysql-操作数据库" class="headerlink" title="2.1.5 do_mysql(操作数据库)"></a>2.1.5 do_mysql(操作数据库)</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">from interface_test.common.config import ReadConfig</span><br><span class="line">config = ReadConfig ()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoMysql</span>:</span></span><br><span class="line">    <span class="comment"># 1.建立连接</span></span><br><span class="line">    <span class="comment"># 2.新建一个查询界面</span></span><br><span class="line">    <span class="comment"># 3.编写sql语句</span></span><br><span class="line">    <span class="comment"># 4.执行SQL语句</span></span><br><span class="line">    <span class="comment"># 5.查看结果</span></span><br><span class="line">    <span class="comment"># 6.关闭查询</span></span><br><span class="line">    <span class="comment"># 7.关闭数据库 </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># db_host = 'test.lemonban.com'</span></span><br><span class="line">        <span class="comment"># db_user = 'test'</span></span><br><span class="line">        <span class="comment"># db_password = 'test'</span></span><br><span class="line">        <span class="comment"># db_database = 'future'</span></span><br><span class="line">        <span class="comment"># db_port = 3306</span></span><br><span class="line">        <span class="comment"># 读取数据库的配置文件的值（在online.cfg的配置文件中，section：db_test 下的值）</span></span><br><span class="line">        db_host = config.get_strvalue(<span class="string">'db_test'</span>,<span class="string">'db_host'</span>)</span><br><span class="line">        db_user = config.get_strvalue(<span class="string">'db_test'</span>,<span class="string">'db_user'</span>)</span><br><span class="line">        db_password = config.get_strvalue(<span class="string">'db_test'</span>,<span class="string">'db_password'</span>)</span><br><span class="line">        db_database = config.get_strvalue(<span class="string">'db_test'</span>,<span class="string">'db_database'</span>)</span><br><span class="line">        db_port = config.get_intvalue(<span class="string">'db_test'</span>,<span class="string">'db_port'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.db = pymysql.connect (host=db_host, user=db_user, password=db_password,</span><br><span class="line">                                   database=db_database, port=db_port,charset=<span class="string">'utf8'</span>)</span><br><span class="line">        <span class="keyword">self</span>.cursor= <span class="keyword">self</span>.db.cursor ()  <span class="comment"># 创建游标</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetch_one</span><span class="params">(<span class="keyword">self</span>,sql)</span></span>:  <span class="comment"># 查询一条数据</span></span><br><span class="line">        <span class="keyword">self</span>.cursor.execute(sql)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.cursor.fetchone()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetch_all</span><span class="params">(<span class="keyword">self</span>,sql)</span></span>:  <span class="comment"># 查询所有的数据</span></span><br><span class="line">        <span class="keyword">self</span>.cursor.execute(sql)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.cursor.fetchall()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.cursor.close()   <span class="comment"># 关闭查询</span></span><br><span class="line">        <span class="keyword">self</span>.db.close()       <span class="comment"># 关闭数据库连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span><span class="symbol">:</span></span><br><span class="line">    my_sql = DoMysql ()</span><br><span class="line">    sql = <span class="string">'select max(mobilephone) from future.member'</span>  <span class="comment">#获取数据库中最大的手机号</span></span><br><span class="line">    result = my_sql.fetch_one(sql)</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><h4 id="2-1-6-re-context-正则匹配操作"><a href="#2-1-6-re-context-正则匹配操作" class="headerlink" title="2.1.6 re_context(正则匹配操作)"></a>2.1.6 re_context(正则匹配操作)</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="title">from</span> interface_test.common.config <span class="keyword">import</span> ReadConfig</span><br><span class="line"><span class="title">config</span> = <span class="type">ReadConfig</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title">def</span> replace_data(<span class="class"><span class="keyword">data</span>):</span></span><br><span class="line">    # <span class="number">1.</span>正则表达式</span><br><span class="line">    regular = '#(.*?)#'</span><br><span class="line">    # <span class="number">2.</span>查找要匹配的字符串</span><br><span class="line">    # search() 扫描字符串，寻找与模式匹配的字符串,返回匹配对象，如果没有找到匹配，则为<span class="type">None</span></span><br><span class="line">    while re.search(regular,<span class="class"><span class="keyword">data</span>):     # 找到匹配的对象</span></span><br><span class="line">        find_data = re.search (regular, <span class="class"><span class="keyword">data</span>)</span></span><br><span class="line">        find_key = find_data.group(<span class="number">1</span>) # 拿到参数化的<span class="type">KEY</span></span><br><span class="line">        find_value = config.get_strvalue('<span class="class"><span class="keyword">data</span>',find_key) #拿配置文件里面的值</span></span><br><span class="line">        # sub(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>)有返回值</span><br><span class="line">        # pattern正则表达式  repl要替换的数据  string<span class="comment">--》data count 替换的次数</span></span><br><span class="line">        <span class="class"><span class="keyword">data</span> = re.sub(<span class="title">regular</span>,<span class="title">find_value</span>,<span class="title">data</span>,<span class="title">count</span>=1)</span></span><br><span class="line">    return <span class="class"><span class="keyword">data</span></span></span><br></pre></td></tr></table></figure><hr><h3 id="2-2-config文件夹-（配置文件的操作）"><a href="#2-2-config文件夹-（配置文件的操作）" class="headerlink" title="2.2 config文件夹 （配置文件的操作）"></a>2.2 config文件夹 （配置文件的操作）</h3><h4 id="2-2-1-global-cfg（控制线上环境或者测试环境的开关）"><a href="#2-2-1-global-cfg（控制线上环境或者测试环境的开关）" class="headerlink" title="2.2.1 global.cfg（控制线上环境或者测试环境的开关）"></a>2.2.1 global.cfg（控制线上环境或者测试环境的开关）</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[switch]</span></span><br><span class="line"><span class="attr">on</span> = <span class="literal">True</span></span><br><span class="line"><span class="comment">;on = False</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-online-cfg（线上环境）"><a href="#2-2-2-online-cfg（线上环境）" class="headerlink" title="2.2.2 online.cfg（线上环境）"></a>2.2.2 online.cfg（线上环境）</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[api]</span></span><br><span class="line"><span class="attr">pre_url</span> = http://test.lemonban.com/futureloan/mvc/api</span><br><span class="line"></span><br><span class="line"><span class="section">[db_test]</span></span><br><span class="line"><span class="attr">db_host</span> = test.lemonban.com</span><br><span class="line"><span class="attr">db_user</span> = test</span><br><span class="line"><span class="attr">db_password</span> = test</span><br><span class="line"><span class="attr">db_database</span> = future</span><br><span class="line"><span class="attr">db_port</span> = <span class="number">3306</span></span><br></pre></td></tr></table></figure><h4 id="2-2-3-test-cfg（测试环境）"><a href="#2-2-3-test-cfg（测试环境）" class="headerlink" title="2.2.3 test.cfg（测试环境）"></a>2.2.3 test.cfg（测试环境）</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[api]</span></span><br><span class="line"><span class="attr">pre_url</span> = http://<span class="number">47.107</span>.<span class="number">168.87</span>:<span class="number">8080</span>/futureloan/mvc/api</span><br></pre></td></tr></table></figure><hr><h3 id="2-3-data文件夹（存放测试用例的Excel文件）"><a href="#2-3-data文件夹（存放测试用例的Excel文件）" class="headerlink" title="2.3 data文件夹（存放测试用例的Excel文件）"></a>2.3 data文件夹（存放测试用例的Excel文件）</h3><h4 id="2-3-1-cases-xlsx-（测试用例）"><a href="#2-3-1-cases-xlsx-（测试用例）" class="headerlink" title="2.3.1 cases.xlsx  （测试用例）"></a>2.3.1 cases.xlsx  （测试用例）</h4><ol><li>注册用例<br><img src="自动化测试之接口测试/register.png" alt="注册用例"></li><li>登录用例<br><img src="自动化测试之接口测试/login.png" alt="登录用例"></li></ol><hr><h3 id="2-4-log文件夹（日志记录文件）"><a href="#2-4-log文件夹（日志记录文件）" class="headerlink" title="2.4 log文件夹（日志记录文件）"></a>2.4 log文件夹（日志记录文件）</h3><h4 id="2-4-1-my-log-py（日志操作）"><a href="#2-4-1-my-log-py（日志操作）" class="headerlink" title="2.4.1 my_log.py（日志操作）"></a>2.4.1 my_log.py（日志操作）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLog</span>:</span></span><br><span class="line">    <span class="string">'''这是一个记录log日志的类'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_log</span><span class="params">(self,level,msg)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        :param level: 日志的等级</span></span><br><span class="line"><span class="string">        :param msg: 需要输出的提示信息</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="comment"># 收集器 - --创建一个日志收集器, getLogger()函数</span></span><br><span class="line">        my_logger = logging.getLogger(<span class="string">'test_request'</span>)</span><br><span class="line">        my_logger.setLevel(<span class="string">'DEBUG'</span>) <span class="comment">#设置等级</span></span><br><span class="line">        <span class="comment">#设定日志输出格式</span></span><br><span class="line">        formatter = logging.Formatter (<span class="string">'%(asctime)s-'</span> <span class="string">'[%(levelname)s]-'</span> <span class="string">'[line:%(lineno)d]-'</span><span class="string">'[日志信息]:%(message)s'</span>)</span><br><span class="line">        <span class="comment">#设定输出渠道---&gt;控制台</span></span><br><span class="line">        sh = logging.StreamHandler()</span><br><span class="line">        sh.setLevel(<span class="string">'ERROR'</span>)</span><br><span class="line">        sh.setFormatter(formatter)</span><br><span class="line">        <span class="comment">#设定输出渠道----&gt;指定文件</span></span><br><span class="line">        fh = logging.FileHandler(<span class="string">'test.log'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        fh.setLevel(<span class="string">'INFO'</span>)</span><br><span class="line">        fh.setFormatter(formatter)</span><br><span class="line">        <span class="comment">#日志收集器与输出渠道进行对接</span></span><br><span class="line">        my_logger.addHandler (sh)</span><br><span class="line">        my_logger.addHandler(fh)</span><br><span class="line">        <span class="keyword">if</span> level == <span class="string">'DEBUG'</span>:</span><br><span class="line">            my_logger.debug(msg)</span><br><span class="line">        <span class="keyword">elif</span> level==<span class="string">'INFO'</span>:</span><br><span class="line">            my_logger.info(msg)</span><br><span class="line">        <span class="keyword">elif</span> level == <span class="string">'WARNING'</span>:</span><br><span class="line">            my_logger.warning(msg)</span><br><span class="line">        <span class="keyword">elif</span> level ==<span class="string">'ERROR'</span>:</span><br><span class="line">            my_logger.error(msg)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            my_logger.critical(msg)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 去掉日志的重复 每次收集完毕之后 移除掉日志收集器</span></span><br><span class="line">        my_logger.removeHandler(sh)</span><br><span class="line">        my_logger.removeHandler(fh)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#重新封装五个不同等级的日志级别的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(self,msg)</span>:</span></span><br><span class="line">        self.my_log(<span class="string">'DEBUG'</span>,msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self,msg)</span>:</span></span><br><span class="line">        self.my_log(<span class="string">'INFO'</span>,msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">warning</span><span class="params">(self,msg)</span>:</span></span><br><span class="line">        self.my_log(<span class="string">'WARNING'</span>,msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">(self,msg)</span>:</span></span><br><span class="line">        self.my_log(<span class="string">'ERROR'</span>,msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">critical</span><span class="params">(self,msg)</span>:</span></span><br><span class="line">        self.my_log(<span class="string">'CRITICAL'</span>,msg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    log = MyLog()</span><br><span class="line">    log.debug(<span class="string">'这是个调试的信息'</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="2-5-report文件夹-（测试报告）"><a href="#2-5-report文件夹-（测试报告）" class="headerlink" title="2.5 report文件夹 （测试报告）"></a>2.5 report文件夹 （测试报告）</h3><h4 id="2-5-1-report-html-这是自动生成的"><a href="#2-5-1-report-html-这是自动生成的" class="headerlink" title="2.5.1 report.html(这是自动生成的)"></a>2.5.1 report.html(这是自动生成的)</h4><hr><h3 id="2-6-testcases文件夹（存放测试用例的方法）"><a href="#2-6-testcases文件夹（存放测试用例的方法）" class="headerlink" title="2.6 testcases文件夹（存放测试用例的方法）"></a>2.6 testcases文件夹（存放测试用例的方法）</h3><h4 id="2-6-1-test-register-py（测试注册接口）"><a href="#2-6-1-test-register-py（测试注册接口）" class="headerlink" title="2.6.1 test_register.py（测试注册接口）"></a>2.6.1 test_register.py（测试注册接口）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> ddt <span class="keyword">import</span> ddt,data</span><br><span class="line"><span class="keyword">from</span> interface_test.common.do_excel <span class="keyword">import</span> DoExcel</span><br><span class="line"><span class="keyword">from</span> interface_test.common.do_request <span class="keyword">import</span> HttpRequest</span><br><span class="line"><span class="keyword">from</span> interface_test.common.contants <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> interface_test.common.do_mysql <span class="keyword">import</span> DoMysql</span><br><span class="line"></span><br><span class="line">do_excel = DoExcel(case_file,<span class="string">'register'</span>)</span><br><span class="line">register_cases = do_excel.get_data()</span><br><span class="line"></span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterTest</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.do_request = HttpRequest()</span><br><span class="line">        cls.mysql = DoMysql ()  <span class="comment"># 创建数据库的连接</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @data(*register_cases)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_register</span><span class="params">(self,case)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> case.data.find(<span class="string">'register_mobile'</span>)&gt;<span class="number">-1</span>: <span class="comment">#测试用例中找到register_mobile</span></span><br><span class="line">            sql = <span class="string">'select max (mobilephone) from future.member'</span></span><br><span class="line">            max_phone = self.mysql.fetch_one(sql)[<span class="number">0</span>] <span class="comment"># 得到的数据是元组，需要取里面的第一个值（索引）</span></span><br><span class="line">            max_phone = int(max_phone)+<span class="number">1</span>  <span class="comment"># 将数据库中最大的手机号+1，保证该手机号未被注册</span></span><br><span class="line">            <span class="comment"># replace()函数 是替换之后重新返回一个新的字符串，有返回值 需要变量去接收</span></span><br><span class="line">            case.data= case.data.replace(<span class="string">'register_mobile'</span>,str(max_phone)) <span class="comment"># 替换参数值</span></span><br><span class="line"></span><br><span class="line">        resp = self.do_request.http_request(case.method,case.url,case.data)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.assertEqual(case.expected,resp.text)</span><br><span class="line">            write_result = <span class="string">'Pass'</span></span><br><span class="line">        <span class="keyword">except</span> AssertionError <span class="keyword">as</span> e:</span><br><span class="line">            write_result = <span class="string">'Failed'</span></span><br><span class="line">            print(<span class="string">'断言出错:&#123;&#125;'</span>.format(e))</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            do_excel.write_back(case.case_id+<span class="number">1</span>,<span class="number">7</span>,resp.text)</span><br><span class="line">            do_excel.write_back(case.case_id+<span class="number">1</span>,<span class="number">8</span>,write_result)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDownClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.do_request.close()</span><br><span class="line">        cls.mysql.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h4 id="2-6-2-test-login-py（测试登录接口）"><a href="#2-6-2-test-login-py（测试登录接口）" class="headerlink" title="2.6.2 test_login.py（测试登录接口）"></a>2.6.2 test_login.py（测试登录接口）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> ddt <span class="keyword">import</span> ddt,data</span><br><span class="line"><span class="keyword">from</span> interface_test.common.do_excel <span class="keyword">import</span> DoExcel</span><br><span class="line"><span class="keyword">from</span> interface_test.common.do_request <span class="keyword">import</span> HttpRequest</span><br><span class="line"><span class="keyword">from</span> interface_test.common.contants <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> interface_test.common.re_context <span class="keyword">import</span> replace_data</span><br><span class="line"></span><br><span class="line">do_excel = DoExcel (case_file, <span class="string">'login'</span>)</span><br><span class="line">login_cases = do_excel.get_data ()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginTest</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.do_request = HttpRequest ()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @data(*login_cases)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_login</span><span class="params">(self,case)</span>:</span></span><br><span class="line">        case.data = replace_data(case.data) <span class="comment">#参数化 正则匹配解析</span></span><br><span class="line">        resp =self.do_request.http_request(case.method,case.url,case.data)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.assertEqual(case.expected,resp.json()[<span class="string">'msg'</span>])</span><br><span class="line">            write_result = <span class="string">'Pass'</span></span><br><span class="line">        <span class="keyword">except</span> AssertionError <span class="keyword">as</span> e:</span><br><span class="line">            write_result = <span class="string">'Failed'</span></span><br><span class="line">            print(<span class="string">'断言错误：&#123;&#125;'</span>.format(e))</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            do_excel.write_back(case.case_id+<span class="number">1</span>,<span class="number">7</span>,resp.text)</span><br><span class="line">            do_excel.write_back(case.case_id+<span class="number">1</span>,<span class="number">8</span>,write_result)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDownClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.do_request.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h4 id="2-6-3-test-recharge-py（测试充值接口）"><a href="#2-6-3-test-recharge-py（测试充值接口）" class="headerlink" title="2.6.3 test_recharge.py（测试充值接口）"></a>2.6.3 test_recharge.py（测试充值接口）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> ddt <span class="keyword">import</span> ddt,data</span><br><span class="line"><span class="keyword">from</span> interface_test.common.do_excel <span class="keyword">import</span> DoExcel</span><br><span class="line"><span class="keyword">from</span> interface_test.common.do_request <span class="keyword">import</span> HttpRequest</span><br><span class="line"><span class="keyword">from</span> interface_test.common.contants <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> interface_test.common.re_context <span class="keyword">import</span> replace_data</span><br><span class="line"></span><br><span class="line">do_excel = DoExcel (case_file, <span class="string">'recharge'</span>)</span><br><span class="line">withdraw_cases = do_excel.get_data ()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithdrawTest</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.do_request = HttpRequest()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @data(*withdraw_cases)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_withdraw</span><span class="params">(self,case)</span>:</span></span><br><span class="line">        case.data = replace_data(case.data) <span class="comment">#参数化 正则匹配解析</span></span><br><span class="line">        resp = self.do_request.http_request(case.method,case.url,case.data)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.assertEqual(case.expected,resp.json()[<span class="string">'msg'</span>])</span><br><span class="line">            write_result = <span class="string">'Pass'</span></span><br><span class="line">        <span class="keyword">except</span> AssertionError <span class="keyword">as</span> e:</span><br><span class="line">            write_result=<span class="string">'Failed'</span></span><br><span class="line">            print(<span class="string">'断言出错：'</span>,e)</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            do_excel.write_back(case.case_id+<span class="number">1</span>,<span class="number">7</span>,resp.text)</span><br><span class="line">            do_excel.write_back(case.case_id+<span class="number">1</span>,<span class="number">8</span>,write_result)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDownClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.do_request.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h4 id="2-6-4-test-withdraw-py（测试取现的接口）"><a href="#2-6-4-test-withdraw-py（测试取现的接口）" class="headerlink" title="2.6.4 test_withdraw.py（测试取现的接口）"></a>2.6.4 test_withdraw.py（测试取现的接口）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> ddt <span class="keyword">import</span> ddt,data</span><br><span class="line"><span class="keyword">from</span> interface_test.common.do_excel <span class="keyword">import</span> DoExcel</span><br><span class="line"><span class="keyword">from</span> interface_test.common.do_request <span class="keyword">import</span> HttpRequest</span><br><span class="line"><span class="keyword">from</span> interface_test.common.contants <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> interface_test.common.re_context <span class="keyword">import</span> replace_data</span><br><span class="line"></span><br><span class="line">do_excel = DoExcel (case_file, <span class="string">'withdraw'</span>)</span><br><span class="line">withdraw_cases = do_excel.get_data ()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithdrawTest</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.do_request = HttpRequest()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @data(*withdraw_cases)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_withdraw</span><span class="params">(self,case)</span>:</span></span><br><span class="line">        case.data = replace_data(case.data) <span class="comment">#参数化 正则匹配解析</span></span><br><span class="line">        resp = self.do_request.http_request(case.method,case.url,case.data)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.assertEqual(case.expected,resp.json()[<span class="string">'msg'</span>])</span><br><span class="line">            write_result = <span class="string">'Pass'</span></span><br><span class="line">        <span class="keyword">except</span> AssertionError <span class="keyword">as</span> e:</span><br><span class="line">            write_result=<span class="string">'Failed'</span></span><br><span class="line">            print(<span class="string">'断言出错：'</span>,e)</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            do_excel.write_back(case.case_id+<span class="number">1</span>,<span class="number">7</span>,resp.text)</span><br><span class="line">            do_excel.write_back(case.case_id+<span class="number">1</span>,<span class="number">8</span>,write_result)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDownClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.do_request.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h4 id="2-6-5-test-addloan-py（测试添加标的接口）"><a href="#2-6-5-test-addloan-py（测试添加标的接口）" class="headerlink" title="2.6.5 test_addloan.py（测试添加标的接口）"></a>2.6.5 test_addloan.py（测试添加标的接口）</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> ddt <span class="keyword">import</span> ddt,data</span><br><span class="line"><span class="keyword">from</span> interface_practice.common.do_request <span class="keyword">import</span> HttpRequest</span><br><span class="line"><span class="keyword">from</span> interface_practice.common.do_excel <span class="keyword">import</span> DoExcel</span><br><span class="line"><span class="keyword">from</span> interface_practice.common.contants <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> interface_test.common.re_context <span class="keyword">import</span> replace_data</span><br><span class="line"></span><br><span class="line">do_excel = DoExcel(case_file,<span class="string">'add_loan'</span>)</span><br><span class="line">addloan_cases = do_excel.get_data()</span><br><span class="line"></span><br><span class="line">@ddt</span><br><span class="line"><span class="keyword">class</span> AddloanTest(unittest.TestCase):</span><br><span class="line">    @classmethod</span><br><span class="line">    <span class="keyword">def</span> setUpClass(cls):</span><br><span class="line">        cls.do_request = HttpRequest()</span><br><span class="line"></span><br><span class="line">    @data(*addloan_cases)</span><br><span class="line">    <span class="keyword">def</span> test_addloan(self,<span class="keyword">case</span>):</span><br><span class="line">        # <span class="keyword">print</span>(<span class="string">'转换前的数据：'</span>,<span class="keyword">case</span>.data) #&#123;<span class="string">"mobilephone"</span>: <span class="string">"#normal_user#"</span>, <span class="string">"pwd"</span>: <span class="string">"#normal_pwd#"</span>&#125;</span><br><span class="line">        <span class="keyword">case</span>.data = replace_data(<span class="keyword">case</span>.data)</span><br><span class="line">        # <span class="keyword">print</span>(<span class="string">'转换后的数据：'</span>,<span class="keyword">case</span>.data) #&#123;<span class="string">"mobilephone"</span>: <span class="string">"17786426991"</span>, <span class="string">"pwd"</span>: <span class="string">"123456"</span>&#125;</span><br><span class="line">        resp = self.do_request.http_request(<span class="keyword">case</span>.method,<span class="keyword">case</span>.url,<span class="keyword">case</span>.data)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.assertEqual(<span class="keyword">case</span>.expected,resp.json()[<span class="string">'msg'</span>])</span><br><span class="line">            write_result = <span class="string">"Pass"</span></span><br><span class="line">        except AssertionError as e:</span><br><span class="line">            write_result=<span class="string">'Failed'</span></span><br><span class="line">            <span class="keyword">print</span>(<span class="string">'断言出错啦:&#123;&#125;'</span>.format(e))</span><br><span class="line">            raise e</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            do_excel.write_back(<span class="keyword">case</span>.case_id+<span class="number">1</span>,<span class="number">7</span>,resp.text)</span><br><span class="line">            do_excel.write_back(<span class="keyword">case</span>.case_id,<span class="number">8</span>,write_result)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    <span class="keyword">def</span> tearDownClass(cls):</span><br><span class="line">        cls.do_request.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h4 id="2-6-6-test-audit-py（测试审核的接口）"><a href="#2-6-6-test-audit-py（测试审核的接口）" class="headerlink" title="2.6.6 test_audit.py（测试审核的接口）"></a>2.6.6 test_audit.py（测试审核的接口）</h4><h4 id="2-6-7-test-bidloan-py（测试投资的接口）"><a href="#2-6-7-test-bidloan-py（测试投资的接口）" class="headerlink" title="2.6.7 test_bidloan.py（测试投资的接口）"></a>2.6.7 test_bidloan.py（测试投资的接口）</h4><h4 id="2-6-8-run-py"><a href="#2-6-8-run-py" class="headerlink" title="2.6.8 run.py"></a>2.6.8 run.py</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python自动化测试之接口测试&quot;&gt;&lt;a href=&quot;#python自动化测试之接口测试&quot; class=&quot;headerlink&quot; title=&quot;python自动化测试之接口测试&quot;&gt;&lt;/a&gt;python自动化测试之接口测试&lt;/h1&gt;&lt;h2 id=&quot;1-项目框架的分层
      
    
    </summary>
    
      <category term="接口测试" scheme="https://gracesoul.github.io/categories/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="python" scheme="https://gracesoul.github.io/tags/python/"/>
    
      <category term="自动化" scheme="https://gracesoul.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="接口测试" scheme="https://gracesoul.github.io/tags/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>hexo与markdown语法简单汇总</title>
    <link href="https://gracesoul.github.io/2019/04/09/hexo%E4%B8%8Emarkdown%E8%AF%AD%E6%B3%95%E7%AE%80%E5%8D%95%E6%B1%87%E6%80%BB/"/>
    <id>https://gracesoul.github.io/2019/04/09/hexo与markdown语法简单汇总/</id>
    <published>2019-04-09T09:02:57.000Z</published>
    <updated>2019-04-12T08:11:39.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo与markdown语法简单汇总"><a href="#hexo与markdown语法简单汇总" class="headerlink" title="hexo与markdown语法简单汇总"></a>hexo与markdown语法简单汇总</h1><h2 id="hexo语法"><a href="#hexo语法" class="headerlink" title="hexo语法"></a>hexo语法</h2><ol><li>hexo init —&gt;初始化本地文件夹为网站的根目录</li><li>hexo new post’博客名’ = hexo new ‘博客名’;简称:hexo n —&gt;新建文字(默认.md)</li><li>hexo generate —&gt; 生成静态文件;简称:hexo g</li><li>hexo deploy —&gt; 用于部署网站;简称:hexo d</li><li>hexo server —&gt; 用于启动本地服务器;简称:hexo s<br>5.1 hexo server -p —&gt;指定服务器端口,默认4000<br>5.2 hexo server -i —&gt;指定服务器ip地址,默认0.0.0.0<br>5.3 hexo server -s —&gt;静态模式,仅提供 public 文件夹中的文件并禁用文件监视</li><li>hexo g -d —&gt;指定生成后部署</li><li>hexo clean —&gt;用于清除缓存文件</li></ol><h2 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h2><ol><li><p>标题<br>1.1 一级标题—&gt;#<br>1.2 二级标题—&gt;##<br>1.3 三级标题—&gt;###<br>1.4 四级标题—&gt;####<br>1.5 五级标题—&gt;#####<br>1.6 六级标题—&gt;######</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure></li><li><p>字体<br>2.1 加粗—&gt;<strong>要加粗的内容</strong><br>2.2 斜体—&gt;<em>要倾斜的内容</em><br>2.3 斜体加粗—&gt;<strong><em>要斜体加粗的内容</em></strong><br>2.4 删除线—&gt;<del>需要加删除线的内容</del>   </p></li><li><p>引用<br>语法:&gt;需要引用的文字内容</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是引用的内容</span><br><span class="line"><span class="meta">&gt;&gt;</span> 这也是引用的内容</span><br></pre></td></tr></table></figure></li><li><p>分割线<br>-/*三个以上即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span><span class="meta">---</span></span><br><span class="line"><span class="string">***</span></span><br><span class="line"><span class="string">*****</span></span><br></pre></td></tr></table></figure></li><li><p>图片 </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 语法:  </span><br><span class="line">![<span class="string">图片alt</span>](<span class="link">图片地址 "图片title"</span>)---&gt;title可不加</span><br><span class="line"> 例如:</span><br><span class="line">![<span class="string">古风</span>](<span class="link">https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1555065335148&amp;di=e3e3187e01f54cd7bc807b3068230a40&amp;imgtype=0&amp;src=http%3A%2F%2Fp4.gexing.com%2FG1%2FM00%2F3F%2F3D%2FrBACJlTKBjPSVP1XAAEBEKmUep8763.jpg</span>)</span><br></pre></td></tr></table></figure></li><li><p>超链接  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法: </span><br><span class="line">[<span class="string">超链接名</span>](<span class="link">超链接地址 "超链接title"</span>)--&gt;title可不加</span><br><span class="line">例如:</span><br><span class="line">[<span class="string">简书</span>](<span class="link">http://jianshu.com</span>)</span><br><span class="line">[<span class="string">百度</span>](<span class="link">http://baidu.com</span>)</span><br></pre></td></tr></table></figure></li><li><p>列表 </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">7.1</span> 无序列表---&gt;-+*都可以(符号与内容之间都要有一个空格)     </span><br><span class="line">  <span class="number">7.2</span> 有序列表---&gt;数字加点(数字与内容之间也要有空格)</span><br><span class="line">  <span class="number">7.3</span> 列表嵌套---&gt;上一级与下一级之间敲三个空格        </span><br><span class="line">* 测试数据                                    </span><br><span class="line">   - 测试<span class="number">1</span></span><br><span class="line">   + 测试<span class="number">2</span></span><br><span class="line">   - 测试<span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>表格       </p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">姓名|<span class="string">技能</span>|<span class="string">排行</span></span><br><span class="line"><span class="string">--</span>|<span class="string">:--:</span>|<span class="string">--:</span></span><br><span class="line"><span class="string">刘备</span>|<span class="string">哭</span>|<span class="string">大哥</span></span><br><span class="line"><span class="string">关羽</span>|<span class="string">打</span>|<span class="string">二哥</span></span><br><span class="line"><span class="string">张飞</span>|<span class="string">骂</span>|<span class="string">三弟</span></span><br></pre></td></tr></table></figure></li><li><p>代码<br>9.1 单行代码:代码之间分别用一个反引号括起来 <code>单行代码</code><br> <code>单行代码内容</code><br>9.2 多行代码:代码之间分别用三个反引号括起来</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">代码内容</span><br><span class="line">代码内容</span><br><span class="line">代码...</span><br></pre></td></tr></table></figure></li><li><p>流程图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hexo与markdown语法简单汇总&quot;&gt;&lt;a href=&quot;#hexo与markdown语法简单汇总&quot; class=&quot;headerlink&quot; title=&quot;hexo与markdown语法简单汇总&quot;&gt;&lt;/a&gt;hexo与markdown语法简单汇总&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="简单语法汇总" scheme="https://gracesoul.github.io/categories/%E7%AE%80%E5%8D%95%E8%AF%AD%E6%B3%95%E6%B1%87%E6%80%BB/"/>
    
    
      <category term="hexo" scheme="https://gracesoul.github.io/tags/hexo/"/>
    
      <category term="markdown" scheme="https://gracesoul.github.io/tags/markdown/"/>
    
      <category term="语法" scheme="https://gracesoul.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>python自动化测试面试题</title>
    <link href="https://gracesoul.github.io/2019/04/04/python%E8%87%AA%E5%8A%A8%E5%8C%96%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://gracesoul.github.io/2019/04/04/python自动化面试题/</id>
    <published>2019-04-04T02:55:33.000Z</published>
    <updated>2019-04-22T02:32:48.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见的python自动化测试的面试题目"><a href="#常见的python自动化测试的面试题目" class="headerlink" title="常见的python自动化测试的面试题目"></a>常见的python自动化测试的面试题目</h1><h3 id="1-对函数传参为可变型数据类型-进行改进"><a href="#1-对函数传参为可变型数据类型-进行改进" class="headerlink" title="1. 对函数传参为可变型数据类型 进行改进"></a>1. 对函数传参为可变型数据类型 进行改进</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def <span class="builtin-name">add</span>(ele,mylist=[]):</span><br><span class="line">mylist.append(ele)</span><br><span class="line">return mylist</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(4))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(5))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(6))</span><br></pre></td></tr></table></figure><hr><p>运行结果如下图:<br>    <img src="python自动化面试题/test1.png" alt="代码结果图"></p><hr><ol><li><p>解决方法一:(最简单的方法,但是代码有点冗余)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  def <span class="builtin-name">add</span>(ele,mylist=[]):</span><br><span class="line">   mylist.append(ele)</span><br><span class="line">   return mylist</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(4,[]))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(5,[]))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(6,[]))</span><br></pre></td></tr></table></figure></li><li><p>解决方法二:(<strong>推荐使用</strong>)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  def <span class="builtin-name">add</span>(ele,mylist=[]):</span><br><span class="line">   <span class="keyword">if</span> <span class="keyword">not</span> mylist:</span><br><span class="line">   mylist=[]  </span><br><span class="line">   mylist.append(ele)</span><br><span class="line">   return mylist</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(4))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(5))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(6))</span><br></pre></td></tr></table></figure></li><li><p>解决方法三:(将默认参数修改为 不可变的类型)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def <span class="builtin-name">add</span>(ele,<span class="attribute">mylist</span>=None):</span><br><span class="line"> mylist.append(ele)</span><br><span class="line"> return mylist</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(4))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(5))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="builtin-name">add</span>(6))</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="2-简述方法中-init-与-new-的区别"><a href="#2-简述方法中-init-与-new-的区别" class="headerlink" title="2. 简述方法中__init__() 与__new__()的区别?"></a>2. 简述方法中__init__() 与__new__()的区别?</h3><ol><li><p>方法__new__()的特性<br>1.1 __new__()用于创建实例,在实例创建之前调用,类级别的方法,是个静态方法<br>1.2 __new__()至少有个参数cls,代表当前类,在实例化时由python解释器自动识别<br>1.3 __new__()必须要返回值,返回实例对象</p></li><li><p>方法__init__()的特性<br>2.1 __init__()用于初始化实例,在实例对象创建后被调用,对象级别的方法,用于设置对象的一些初始值<br>2.2 __init__()至少有一个参数self,它是<strong>new</strong>()返回的实例,<strong>init</strong>()是在<strong>new</strong>()的基础上完成数据的初始化操作<br>2.3 __init__()不需要返回值</p></li><li><p>__new__()的作用<br>3.1 __new__() 用来继承一些不可变的class(比如:int,str,tuple)提供一个自定义类的实例化过程的途径</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 子类名(<span class="title">int</span>):</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls,value)</span></span><span class="symbol">:</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">super</span>(子类类名,cls).__new_<span class="number">_</span>(cls,abs(value))</span><br></pre></td></tr></table></figure><p>3.2 __new__()实现单例模式(每次初始化时只返回一个对象)</p> <figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def __new__(<span class="built_in">cls</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> hasattr(<span class="built_in">cls</span>,'instance'):</span><br><span class="line"><span class="built_in">cls</span>.instance = super(子类类名,<span class="built_in">cls</span>).__new__(<span class="built_in">cls</span>)</span><br><span class="line">return <span class="built_in">cls</span>.instance</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常见的python自动化测试的面试题目&quot;&gt;&lt;a href=&quot;#常见的python自动化测试的面试题目&quot; class=&quot;headerlink&quot; title=&quot;常见的python自动化测试的面试题目&quot;&gt;&lt;/a&gt;常见的python自动化测试的面试题目&lt;/h1&gt;&lt;h3 i
      
    
    </summary>
    
      <category term="面试笔试题" scheme="https://gracesoul.github.io/categories/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="python" scheme="https://gracesoul.github.io/tags/python/"/>
    
      <category term="自动化测试" scheme="https://gracesoul.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="面试题" scheme="https://gracesoul.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>更换主题踩得坑</title>
    <link href="https://gracesoul.github.io/2019/04/01/%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98%E8%B8%A9%E5%BE%97%E5%9D%91/"/>
    <id>https://gracesoul.github.io/2019/04/01/更换主题踩得坑/</id>
    <published>2019-04-01T08:17:15.000Z</published>
    <updated>2019-04-09T08:06:59.523Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-使用hexo-github-搭建博客-更换主题-踩到的坑"><a href="#1-使用hexo-github-搭建博客-更换主题-踩到的坑" class="headerlink" title="1. 使用hexo+github 搭建博客 更换主题 踩到的坑"></a>1. 使用hexo+github 搭建博客 更换主题 踩到的坑</h3><ol><li>使用别人的主题 修改theme </li><li>部署发布(hexo clean   —  hexo s) </li><li>登录本地服务器 (localhost:4000)<br>界面出现:<br><img src="更换主题踩得坑/error.png" alt="更换主题踩得坑"></li></ol><hr><p>解决方案:<br>npm install –save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive<br>(安装 Apollo Github 的依赖包)</p><p>本地就可以正常运行<br>安装后,hexo clean —&gt;hexo s</p><p>部署到github上运行:<br>安装后,hexo clean —&gt;hexo g—&gt;hexo d</p><h3 id="本地样式正常-但是部署到github上-远程访问-样式发生改变-样式乱"><a href="#本地样式正常-但是部署到github上-远程访问-样式发生改变-样式乱" class="headerlink" title="本地样式正常,但是部署到github上 远程访问 样式发生改变(样式乱)"></a>本地样式正常,但是部署到github上 远程访问 样式发生改变(样式乱)</h3><p>原因:<br>   修改根目录下的配置文件: _config.yml  将url进行修改 root 不需要修改<br>   由于参考过网上: 将root由/—&gt;改为/你的项目名  但是经过测试,没有起到作用,可能因人而异吧<br>   配置修改如下图:<br>   <img src="更换主题踩得坑/result.png" alt="url配置图"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-使用hexo-github-搭建博客-更换主题-踩到的坑&quot;&gt;&lt;a href=&quot;#1-使用hexo-github-搭建博客-更换主题-踩到的坑&quot; class=&quot;headerlink&quot; title=&quot;1. 使用hexo+github 搭建博客 更换主题 踩到的坑&quot;
      
    
    </summary>
    
      <category term="更换主题" scheme="https://gracesoul.github.io/categories/%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/"/>
    
    
      <category term="hexo" scheme="https://gracesoul.github.io/tags/hexo/"/>
    
      <category term="github" scheme="https://gracesoul.github.io/tags/github/"/>
    
      <category term="主题" scheme="https://gracesoul.github.io/tags/%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://gracesoul.github.io/2019/03/28/hello-world/"/>
    <id>https://gracesoul.github.io/2019/03/28/hello-world/</id>
    <published>2019-03-28T02:03:00.707Z</published>
    <updated>2019-03-28T02:03:00.707Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
